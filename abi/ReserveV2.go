// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ReserveV2ABI is the input ABI used to generate the binding from.
const ReserveV2ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"changeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"previousImplementation\",\"type\":\"address\"}],\"name\":\"completeHandoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTxFee\",\"type\":\"address\"}],\"name\":\"changeTxFeeHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEternalStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"FreezerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wiped\",\"type\":\"address\"}],\"name\":\"Wiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]"

// ReserveV2Bin is the compiled bytecode used for deploying new contracts.
const ReserveV2Bin = `60c0604052600760808190527f526573657276650000000000000000000000000000000000000000000000000060a09081526200004091600291906200013b565b506040805180820190915260038082527f525356000000000000000000000000000000000000000000000000000000000060209092019182526200008591816200013b565b503480156200009357600080fd5b5033604051620000a390620001c0565b6001600160a01b03909116815260405190819003602001906000f080158015620000d1573d6000803e3d6000fd5b50600080546001600160a01b03929092166001600160a01b031992831617905560018054821681556005805460078054851633908117909155600a8054909516811790945560ff1961010094909402610100600160a81b03199091161792909216179055620001ee565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017e57805160ff1916838001178555620001ae565b82800160010185558215620001ae579182015b82811115620001ae57825182559160200191906001019062000191565b50620001bc929150620001ce565b5090565b610bdc806200488d83390190565b620001eb91905b80821115620001bc5760008155600101620001d5565b90565b61468f80620001fe6000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063715018a61161017b57806396cd5536116100d8578063ac5b54c21161008c578063dd62ed3e11610071578063dd62ed3e146108cd578063f0141d8414610908578063fb56896614610910576102ad565b8063ac5b54c214610892578063cf820461146108c5576102ad565b80639fd0506d116100bd5780639fd0506d14610818578063a457c2d714610820578063a9059cbb14610859576102ad565b806396cd5536146107b2578063988749d1146107e5576102ad565b806386575e401161012f5780638da5cb5b116101145780638da5cb5b1461079a57806392716054146107a257806395d89b41146107aa576102ad565b806386575e40146106a55780638d1fdf2f14610767576102ad565b806379cc67901161016057806379cc6790146106315780637f3c7b041461066a5780638456cb591461069d576102ad565b8063715018a61461062157806379ba509714610629576102ad565b8063313ce5671161022957806346904840116101dd5780635c975abb116101c25780635c975abb146105b35780636960d024146105bb57806370a08231146105ee576102ad565b806346904840146105a357806353a47bb7146105ab576102ad565b80633f4ba83a1161020e5780633f4ba83a1461052f57806340c10f191461053757806345c8b1a614610570576102ad565b8063313ce567146104d857806339509351146104f6576102ad565b806318160ddd1161028057806323b872dd1161026557806323b872dd1461042f5780632c4d4d18146104725780632cd271e7146104a5576102ad565b806318160ddd146103e257806323604071146103fc576102ad565b806306fdde03146102b2578063075461721461032f578063095ea7b3146103605780631627540c146103ad575b600080fd5b6102ba610918565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f45781810151838201526020016102dc565b50505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103376109c1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103996004803603604081101561037657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109dd565b604080519115158252519081900360200190f35b6103e0600480360360208110156103c357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c81565b005b6103ea610d55565b60408051918252519081900360200190f35b6103e06004803603602081101561041257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d5b565b6103996004803603606081101561044557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610e68565b6103e06004803603602081101561048857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112e0565b6103e0600480360360208110156104bb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113ed565b6104e06114fa565b6040805160ff9092168252519081900360200190f35b6103996004803603604081101561050c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356114ff565b6103e061184d565b6103e06004803603604081101561054d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611944565b6103e06004803603602081101561058657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ccd565b610337611f3d565b610337611f59565b610399611f75565b6103e0600480360360208110156105d157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611f7e565b6103ea6004803603602081101561060457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661208b565b6103e0612131565b6103e0612230565b6103e06004803603604081101561064757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612376565b6103e06004803603602081101561068057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612614565b6103e0612b89565b6103e0600480360360408110156106bb57600080fd5b8101906020810181356401000000008111156106d657600080fd5b8201836020820111156106e857600080fd5b8035906020019184600183028401116401000000008311171561070a57600080fd5b91939092909160208101903564010000000081111561072857600080fd5b82018360208201111561073a57600080fd5b8035906020019184600183028401116401000000008311171561075c57600080fd5b509092509050612c83565b6103e06004803603602081101561077d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612df8565b610337613066565b610337613087565b6102ba6130a3565b6103e0600480360360208110156107c857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661311c565b6103e0600480360360208110156107fb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613235565b6103376135b7565b6103996004803603604081101561083657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356135d3565b6103996004803603604081101561086f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356137e5565b6103e0600480360360208110156108a857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613a7e565b610337613b52565b6103ea600480360360408110156108e357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516613b6e565b6104e0613c1d565b610337613c23565b600280546040805160206001841615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909316849004601f810184900484028201840190925281815292918301828280156109b95780601f1061098e576101008083540402835291602001916109b9565b820191906000526020600020905b81548152906001019060200180831161099c57829003601f168201915b505050505081565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60055460009060ff1615610a5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b158015610ac557600080fd5b505afa158015610ad9573d6000803e3d6000fd5b505050506040513d6020811015610aef57600080fd5b505115610b5d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b158015610bd357600080fd5b505afa158015610be7573d6000803e3d6000fd5b505050506040513d6020811015610bfd57600080fd5b505115610c6b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610c76338686613c3f565b506001949350505050565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16338114610d0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b50600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045481565b600a5460055473ffffffffffffffffffffffffffffffffffffffff9182169133610100909204161480610da357503373ffffffffffffffffffffffffffffffffffffffff8216145b610df8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614610602b913960400191505060405180910390fd5b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517f167cccccc6e9b2892a740ec13fc1e51d3de8ea384f25bd87fee7412d588637e290600090a25050565b60055460009060ff1615610edd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d6020811015610f7a57600080fd5b505115610fe857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b15801561105e57600080fd5b505afa158015611072573d6000803e3d6000fd5b505050506040513d602081101561108857600080fd5b5051156110f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015291518893929092169163b062307491602480820192602092909190829003018186803b15801561116c57600080fd5b505afa158015611180573d6000803e3d6000fd5b505050506040513d602081101561119657600080fd5b50511561120457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b61120f878787613e2f565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808b166004830152336024830181905292516112d3948c94936112ce938c93921691635c65816591604480820192602092909190829003018186803b15801561129657600080fd5b505afa1580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b50519063ffffffff61424016565b613c3f565b5060019695505050505050565b60065460055473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061132857503373ffffffffffffffffffffffffffffffffffffffff8216145b61137d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614610602b913960400191505060405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a25050565b60075460055473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061143557503373ffffffffffffffffffffffffffffffffffffffff8216145b61148a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614610602b913960400191505060405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a25050565b601281565b60055460009060ff161561157457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b50511561167f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b50511561178d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff808a1660248401529251610c769491938a936112ce938b93921691635c65816591604480820192602092909190829003018186803b15801561181557600080fd5b505afa158015611829573d6000803e3d6000fd5b505050506040513d602081101561183f57600080fd5b50519063ffffffff61428916565b60075473ffffffffffffffffffffffffffffffffffffffff163381146118d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560075460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a250565b60055460ff16156119b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b158015611a2c57600080fd5b505afa158015611a40573d6000803e3d6000fd5b505050506040513d6020811015611a5657600080fd5b505115611ac457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff16338114611b4b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8416611bcd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f63616e2774206d696e7420746f2061646472657373207a65726f000000000000604482015290519081900360640190fd5b600454611be0908463ffffffff61428916565b600490815560008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981169582019590955260248101889052905193909116926321e5383a9260448084019391929182900301818387803b158015611c6157600080fd5b505af1158015611c75573d6000803e3d6000fd5b505060408051868152905173ffffffffffffffffffffffffffffffffffffffff88169350600092507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050565b60085473ffffffffffffffffffffffffffffffffffffffff16338114611d5457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015611dc857600080fd5b505afa158015611ddc573d6000803e3d6000fd5b505050506040513d6020811015611df257600080fd5b505111611e6057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6163636f756e74206e6f742066726f7a656e0000000000000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590529151919092169263b65dc413926044808201939182900301818387803b158015611ed857600080fd5b505af1158015611eec573d6000803e3d6000fd5b505060085460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507f295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b490600090a35050565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60055460ff1681565b60085460055473ffffffffffffffffffffffffffffffffffffffff9182169133610100909204161480611fc657503373ffffffffffffffffffffffffffffffffffffffff8216145b61201b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614610602b913960400191505060405180910390fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517f97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da390600090a25050565b60008054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163e3d670d7916024808301926020929190829003018186803b1580156120ff57600080fd5b505afa158015612113573d6000803e3d6000fd5b505050506040513d602081101561212957600080fd5b505192915050565b600554610100900473ffffffffffffffffffffffffffffffffffffffff163381146121bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169081905560405161010090910473ffffffffffffffffffffffffffffffffffffffff16907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a250565b60095460055473ffffffffffffffffffffffffffffffffffffffff918216913361010090920416148061227857503373ffffffffffffffffffffffffffffffffffffffff8216145b6122cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180614610602b913960400191505060405180910390fd5b600554610100900473ffffffffffffffffffffffffffffffffffffffff16331461231d5760405133907fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690600090a25b50600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010002179055600980547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60055460ff16156123e857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015291518593929092169163b062307491602480820192602092909190829003018186803b15801561245e57600080fd5b505afa158015612472573d6000803e3d6000fd5b505050506040513d602081101561248857600080fd5b5051156124f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff1633811461257d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b61258784846142fd565b600054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80881660048301523360248301819052925161260e948994936112ce938a93921691635c65816591604480820192602092909190829003018186803b15801561129657600080fd5b50505050565b600554610100900473ffffffffffffffffffffffffffffffffffffffff163381146126a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663fb5689666040518163ffffffff1660e01b815260040160206040518083038186803b1580156126eb57600080fd5b505afa1580156126ff573d6000803e3d6000fd5b505050506040513d602081101561271557600080fd5b5051600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316178155604080517f79ba50970000000000000000000000000000000000000000000000000000000081529051928416926379ba50979260048084019391929182900301818387803b1580156127a957600080fd5b505af11580156127bd573d6000803e3d6000fd5b5050604080517f96cd5536000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff851693506396cd55369250602480830192600092919082900301818387803b15801561282e57600080fd5b505af1158015612842573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff85169350632cd271e79250602480830192600092919082900301818387803b1580156128b357600080fd5b505af11580156128c7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561291357600080fd5b505af1158015612927573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505060075460405173ffffffffffffffffffffffffffffffffffffffff909116907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2604080517f2c4d4d18000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff841692632c4d4d18926024808201939182900301818387803b158015612a0457600080fd5b505af1158015612a18573d6000803e3d6000fd5b5050604080517f2cd271e7000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450632cd271e793506024808301939282900301818387803b158015612a8857600080fd5b505af1158015612a9c573d6000803e3d6000fd5b5050604080517f6960d024000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff86169450636960d02493506024808301939282900301818387803b158015612b0c57600080fd5b505af1158015612b20573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b6c57600080fd5b505af1158015612b80573d6000803e3d6000fd5b50505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff16338114612c1057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560075460405173ffffffffffffffffffffffffffffffffffffffff909116907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a250565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16338114612d0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b612d1b6002868661452e565b50612d286003848461452e565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a858585856040518080602001806020018381038352878782818152602001925080828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910184810383528581526020019050858580828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a15050505050565b60085473ffffffffffffffffffffffffffffffffffffffff16338114612e7f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163b0623074916024808301926020929190829003018186803b158015612ef257600080fd5b505afa158015612f06573d6000803e3d6000fd5b505050506040513d6020811015612f1c57600080fd5b505115612f8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6163636f756e7420616c72656164792066726f7a656e00000000000000000000604482015290519081900360640190fd5b60008054604080517fb65dc41300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301524260248301529151919092169263b65dc413926044808201939182900301818387803b15801561300157600080fd5b505af1158015613015573d6000803e3d6000fd5b505060085460405173ffffffffffffffffffffffffffffffffffffffff868116945090911691507ff0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de90600090a35050565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b6003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156109b95780601f1061098e576101008083540402835291602001916109b9565b600554610100900473ffffffffffffffffffffffffffffffffffffffff163381146131a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169263f2fde38b926024808201939182900301818387803b15801561321957600080fd5b505af115801561322d573d6000803e3d6000fd5b505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff163381146132bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b60008054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529151919092169163b0623074916024808301926020929190829003018186803b15801561333057600080fd5b505afa158015613344573d6000803e3d6000fd5b505050506040513d602081101561335a57600080fd5b5051116133c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f74207769706520756e66726f7a656e206163636f756e7400000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291514293929092169163b062307491602480820192602092909190829003018186803b15801561343e57600080fd5b505afa158015613452573d6000803e3d6000fd5b505050506040513d602081101561346857600080fd5b50516224ea0001106134c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061463b6029913960400191505060405180910390fd5b600054604080517fe3d670d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152915161356c938693169163e3d670d7916024808301926020929190829003018186803b15801561353b57600080fd5b505afa15801561354f573d6000803e3d6000fd5b505050506040513d602081101561356557600080fd5b50516142fd565b60085460405173ffffffffffffffffffffffffffffffffffffffff8085169216907faa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c90600090a35050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60055460009060ff161561364857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156136bb57600080fd5b505afa1580156136cf573d6000803e3d6000fd5b505050506040513d60208110156136e557600080fd5b50511561375357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517f5c658165000000000000000000000000000000000000000000000000000000008152336004820181905273ffffffffffffffffffffffffffffffffffffffff808916602484015292516137db94919389936112ce938a93921691635c65816591604480820192602092909190829003018186803b15801561129657600080fd5b5060019392505050565b60055460009060ff161561385a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815233600482018190529151919273ffffffffffffffffffffffffffffffffffffffff169163b062307491602480820192602092909190829003018186803b1580156138cd57600080fd5b505afa1580156138e1573d6000803e3d6000fd5b505050506040513d60208110156138f757600080fd5b50511561396557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b600054604080517fb062307400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808816600483015291518793929092169163b062307491602480820192602092909190829003018186803b1580156139db57600080fd5b505afa1580156139ef573d6000803e3d6000fd5b505050506040513d6020811015613a0557600080fd5b505115613a7357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6163636f756e742066726f7a656e000000000000000000000000000000000000604482015290519081900360640190fd5b610c76338686613e2f565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16338114613b0a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f756e617574686f72697a65643a206e6f7420726f6c6520686f6c646572000000604482015290519081900360640190fd5b50600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008054604080517f5c65816500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015291519190921691635c658165916044808301926020929190829003018186803b158015613bea57600080fd5b505afa158015613bfe573d6000803e3d6000fd5b505050506040513d6020811015613c1457600080fd5b50519392505050565b60125b90565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8216613cc157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7370656e6465722063616e6e6f742062652061646472657373207a65726f0000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316613d4357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f686f6c6465722063616e6e6f742062652061646472657373207a65726f000000604482015290519081900360640190fd5b60008054604080517f33dd1b8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015260448201869052915191909216926333dd1b8a926064808201939182900301818387803b158015613dc357600080fd5b505af1158015613dd7573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450871692507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216613eb157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f63616e2774207472616e7366657220746f2061646472657373207a65726f0000604482015290519081900360640190fd5b60008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018690529151919092169263cf8eeb7e926044808201939182900301818387803b158015613f2957600080fd5b505af1158015613f3d573d6000803e3d6000fd5b50506001546000925073ffffffffffffffffffffffffffffffffffffffff1615905061415857600154604080517f8b28ab1e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301526024820186905291519190921691638b28ab1e9160448083019260209291908290030181600087803b158015613fdf57600080fd5b505af1158015613ff3573d6000803e3d6000fd5b505050506040513d602081101561400957600080fd5b50519050801580159061401b57508181105b614070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806145e5602b913960400191505060405180910390fd5b60008054600a54604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101869052905191909216926321e5383a926044808201939182900301818387803b1580156140eb57600080fd5b505af11580156140ff573d6000803e3d6000fd5b5050600a5460408051858152905173ffffffffffffffffffffffffffffffffffffffff928316945091881692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35b60008054604080517f21e5383a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528587036024830152915191909216926321e5383a926044808201939182900301818387803b1580156141d157600080fd5b505af11580156141e5573d6000803e3d6000fd5b5050604080518486038152905173ffffffffffffffffffffffffffffffffffffffff8088169450881692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050565b600061428283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061447d565b9392505050565b60008282018381101561428257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821661437f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e2774206275726e2066726f6d2061646472657373207a65726f00000000604482015290519081900360640190fd5b600454614392908263ffffffff61424016565b600490815560008054604080517fcf8eeb7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811695820195909552602481018690529051939091169263cf8eeb7e9260448084019391929182900301818387803b15801561441357600080fd5b505af1158015614427573d6000803e3d6000fd5b50506040805184815290516000935073ffffffffffffffffffffffffffffffffffffffff861692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008184841115614526576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156144eb5781810151838201526020016144d3565b50505050905090810190601f1680156145185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061458d578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008235161785556145ba565b828001600101855582156145ba579182015b828111156145ba57823582559160200191906001019061459f565b506145c69291506145ca565b5090565b613c2091905b808211156145c657600081556001016145d056fe6665652063616e6e6f742062652067726561746572207468616e2074686520746f74616c20616d6f756e74756e617574686f72697a65643a206e6f7420726f6c6520686f6c64657220616e64206e6f74206f776e657263616e6e6f7420776970652066726f7a656e206163636f756e74206265666f72652034207765656b73a165627a7a7230582054d786a7d2b983759c653fe398d8229cdd75b01041878ffc561e4cc314dfc5740029608060405234801561001057600080fd5b50604051602080610bdc8339810180604052602081101561003057600080fd5b5051600080546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055610b6d8061006f6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b062307411610081578063e30443bc1161005b578063e30443bc146102b5578063e3d670d7146102ee578063f2fde38b14610321576100d4565b8063b062307414610210578063b65dc41314610243578063cf8eeb7e1461027c576100d4565b80635c658165116100b25780635c658165146101885780638babf203146101d55780638da5cb5b14610208576100d4565b80631554611f146100d957806321e5383a1461010a57806333dd1b8a14610145575b600080fd5b6100e1610354565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101436004803603604081101561012057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610370565b005b6101436004803603606081101561015b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610459565b6101c36004803603604081101561019e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610518565b60408051918252519081900360200190f35b610143600480360360208110156101eb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610535565b6100e1610649565b6101c36004803603602081101561022657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610665565b6101436004803603604081101561025957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610677565b6101436004803603604081101561029257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610726565b610143600480360360408110156102cb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107e2565b6101c36004803603602081101561030457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610891565b6101436004803603602081101561033757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108a3565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461042c908263ffffffff6109d816565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090209190915550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff92831660009081526003602090815260408083209490951682529290925291902055565b600360209081526000928352604080842090915290825290205481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f089af7288b55770a7c1dfd40b9d9e464c64031c45326c0916854814b6c16da2890600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260046020526040902055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461042c908263ffffffff610a5316565b60005473ffffffffffffffffffffffffffffffffffffffff16331461086857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6f6e6c794f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020526040902055565b60026020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff163314806108e0575060015473ffffffffffffffffffffffffffffffffffffffff1633145b61094b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082820183811015610a4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000610a4c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115610b39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610afe578181015183820152602001610ae6565b50505050905090810190601f168015610b2b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea165627a7a72305820b219396b330d0ef52dc2f277f2a517c53c78324478a1c84d3d5747b10635bd660029`

// DeployReserveV2 deploys a new Ethereum contract, binding an instance of ReserveV2 to it.
func DeployReserveV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveV2, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveV2{ReserveV2Caller: ReserveV2Caller{contract: contract}, ReserveV2Transactor: ReserveV2Transactor{contract: contract}, ReserveV2Filterer: ReserveV2Filterer{contract: contract}}, nil
}

// ReserveV2 is an auto generated Go binding around an Ethereum contract.
type ReserveV2 struct {
	ReserveV2Caller     // Read-only binding to the contract
	ReserveV2Transactor // Write-only binding to the contract
	ReserveV2Filterer   // Log filterer for contract events
}

// ReserveV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveV2Session struct {
	Contract     *ReserveV2        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReserveV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveV2CallerSession struct {
	Contract *ReserveV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ReserveV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveV2TransactorSession struct {
	Contract     *ReserveV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ReserveV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveV2Raw struct {
	Contract *ReserveV2 // Generic contract binding to access the raw methods on
}

// ReserveV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveV2CallerRaw struct {
	Contract *ReserveV2Caller // Generic read-only contract binding to access the raw methods on
}

// ReserveV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveV2TransactorRaw struct {
	Contract *ReserveV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveV2 creates a new instance of ReserveV2, bound to a specific deployed contract.
func NewReserveV2(address common.Address, backend bind.ContractBackend) (*ReserveV2, error) {
	contract, err := bindReserveV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveV2{ReserveV2Caller: ReserveV2Caller{contract: contract}, ReserveV2Transactor: ReserveV2Transactor{contract: contract}, ReserveV2Filterer: ReserveV2Filterer{contract: contract}}, nil
}

// NewReserveV2Caller creates a new read-only instance of ReserveV2, bound to a specific deployed contract.
func NewReserveV2Caller(address common.Address, caller bind.ContractCaller) (*ReserveV2Caller, error) {
	contract, err := bindReserveV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveV2Caller{contract: contract}, nil
}

// NewReserveV2Transactor creates a new write-only instance of ReserveV2, bound to a specific deployed contract.
func NewReserveV2Transactor(address common.Address, transactor bind.ContractTransactor) (*ReserveV2Transactor, error) {
	contract, err := bindReserveV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveV2Transactor{contract: contract}, nil
}

// NewReserveV2Filterer creates a new log filterer instance of ReserveV2, bound to a specific deployed contract.
func NewReserveV2Filterer(address common.Address, filterer bind.ContractFilterer) (*ReserveV2Filterer, error) {
	contract, err := bindReserveV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveV2Filterer{contract: contract}, nil
}

// bindReserveV2 binds a generic wrapper to an already deployed contract.
func bindReserveV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveV2 *ReserveV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveV2.Contract.ReserveV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveV2 *ReserveV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.Contract.ReserveV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveV2 *ReserveV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveV2.Contract.ReserveV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveV2 *ReserveV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveV2 *ReserveV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveV2 *ReserveV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveV2.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveV2 *ReserveV2Caller) Allowance(opts *bind.CallOpts, holder common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "allowance", holder, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveV2 *ReserveV2Session) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveV2.Contract.Allowance(&_ReserveV2.CallOpts, holder, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveV2 *ReserveV2CallerSession) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveV2.Contract.Allowance(&_ReserveV2.CallOpts, holder, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveV2 *ReserveV2Caller) BalanceOf(opts *bind.CallOpts, holder common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "balanceOf", holder)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveV2 *ReserveV2Session) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveV2.Contract.BalanceOf(&_ReserveV2.CallOpts, holder)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveV2 *ReserveV2CallerSession) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveV2.Contract.BalanceOf(&_ReserveV2.CallOpts, holder)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2Session) Decimals() (uint8, error) {
	return _ReserveV2.Contract.Decimals(&_ReserveV2.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2CallerSession) Decimals() (uint8, error) {
	return _ReserveV2.Contract.Decimals(&_ReserveV2.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) FeeRecipient(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "feeRecipient")
	return *ret0, err
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() constant returns(address)
func (_ReserveV2 *ReserveV2Session) FeeRecipient() (common.Address, error) {
	return _ReserveV2.Contract.FeeRecipient(&_ReserveV2.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) FeeRecipient() (common.Address, error) {
	return _ReserveV2.Contract.FeeRecipient(&_ReserveV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) Freezer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "freezer")
	return *ret0, err
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveV2 *ReserveV2Session) Freezer() (common.Address, error) {
	return _ReserveV2.Contract.Freezer(&_ReserveV2.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) Freezer() (common.Address, error) {
	return _ReserveV2.Contract.Freezer(&_ReserveV2.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2Caller) GetDecimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "getDecimals")
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2Session) GetDecimals() (uint8, error) {
	return _ReserveV2.Contract.GetDecimals(&_ReserveV2.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() constant returns(uint8)
func (_ReserveV2 *ReserveV2CallerSession) GetDecimals() (uint8, error) {
	return _ReserveV2.Contract.GetDecimals(&_ReserveV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) GetEternalStorageAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "getEternalStorageAddress")
	return *ret0, err
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveV2 *ReserveV2Session) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveV2.Contract.GetEternalStorageAddress(&_ReserveV2.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveV2.Contract.GetEternalStorageAddress(&_ReserveV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "minter")
	return *ret0, err
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveV2 *ReserveV2Session) Minter() (common.Address, error) {
	return _ReserveV2.Contract.Minter(&_ReserveV2.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) Minter() (common.Address, error) {
	return _ReserveV2.Contract.Minter(&_ReserveV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveV2 *ReserveV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveV2 *ReserveV2Session) Name() (string, error) {
	return _ReserveV2.Contract.Name(&_ReserveV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveV2 *ReserveV2CallerSession) Name() (string, error) {
	return _ReserveV2.Contract.Name(&_ReserveV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveV2 *ReserveV2Session) NominatedOwner() (common.Address, error) {
	return _ReserveV2.Contract.NominatedOwner(&_ReserveV2.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) NominatedOwner() (common.Address, error) {
	return _ReserveV2.Contract.NominatedOwner(&_ReserveV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveV2 *ReserveV2Session) Owner() (common.Address, error) {
	return _ReserveV2.Contract.Owner(&_ReserveV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) Owner() (common.Address, error) {
	return _ReserveV2.Contract.Owner(&_ReserveV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveV2 *ReserveV2Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveV2 *ReserveV2Session) Paused() (bool, error) {
	return _ReserveV2.Contract.Paused(&_ReserveV2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveV2 *ReserveV2CallerSession) Paused() (bool, error) {
	return _ReserveV2.Contract.Paused(&_ReserveV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) Pauser(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "pauser")
	return *ret0, err
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveV2 *ReserveV2Session) Pauser() (common.Address, error) {
	return _ReserveV2.Contract.Pauser(&_ReserveV2.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) Pauser() (common.Address, error) {
	return _ReserveV2.Contract.Pauser(&_ReserveV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveV2 *ReserveV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveV2 *ReserveV2Session) Symbol() (string, error) {
	return _ReserveV2.Contract.Symbol(&_ReserveV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveV2 *ReserveV2CallerSession) Symbol() (string, error) {
	return _ReserveV2.Contract.Symbol(&_ReserveV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveV2 *ReserveV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveV2 *ReserveV2Session) TotalSupply() (*big.Int, error) {
	return _ReserveV2.Contract.TotalSupply(&_ReserveV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveV2 *ReserveV2CallerSession) TotalSupply() (*big.Int, error) {
	return _ReserveV2.Contract.TotalSupply(&_ReserveV2.CallOpts)
}

// TxFee is a free data retrieval call binding the contract method 0xcf820461.
//
// Solidity: function txFee() constant returns(address)
func (_ReserveV2 *ReserveV2Caller) TxFee(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveV2.contract.Call(opts, out, "txFee")
	return *ret0, err
}

// TxFee is a free data retrieval call binding the contract method 0xcf820461.
//
// Solidity: function txFee() constant returns(address)
func (_ReserveV2 *ReserveV2Session) TxFee() (common.Address, error) {
	return _ReserveV2.Contract.TxFee(&_ReserveV2.CallOpts)
}

// TxFee is a free data retrieval call binding the contract method 0xcf820461.
//
// Solidity: function txFee() constant returns(address)
func (_ReserveV2 *ReserveV2CallerSession) TxFee() (common.Address, error) {
	return _ReserveV2.Contract.TxFee(&_ReserveV2.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveV2 *ReserveV2Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveV2 *ReserveV2Session) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveV2.Contract.AcceptOwnership(&_ReserveV2.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveV2 *ReserveV2TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveV2.Contract.AcceptOwnership(&_ReserveV2.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Approve(&_ReserveV2.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Approve(&_ReserveV2.TransactOpts, spender, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2Session) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.BurnFrom(&_ReserveV2.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2TransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.BurnFrom(&_ReserveV2.TransactOpts, account, value)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address newFeeRecipient) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangeFeeRecipient(opts *bind.TransactOpts, newFeeRecipient common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changeFeeRecipient", newFeeRecipient)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address newFeeRecipient) returns()
func (_ReserveV2 *ReserveV2Session) ChangeFeeRecipient(newFeeRecipient common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeFeeRecipient(&_ReserveV2.TransactOpts, newFeeRecipient)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address newFeeRecipient) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangeFeeRecipient(newFeeRecipient common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeFeeRecipient(&_ReserveV2.TransactOpts, newFeeRecipient)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangeFreezer(opts *bind.TransactOpts, newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changeFreezer", newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveV2 *ReserveV2Session) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeFreezer(&_ReserveV2.TransactOpts, newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeFreezer(&_ReserveV2.TransactOpts, newFreezer)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangeMinter(opts *bind.TransactOpts, newMinter common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changeMinter", newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveV2 *ReserveV2Session) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeMinter(&_ReserveV2.TransactOpts, newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeMinter(&_ReserveV2.TransactOpts, newMinter)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangeName(opts *bind.TransactOpts, newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changeName", newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveV2 *ReserveV2Session) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeName(&_ReserveV2.TransactOpts, newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeName(&_ReserveV2.TransactOpts, newName, newSymbol)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangePauser(opts *bind.TransactOpts, newPauser common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changePauser", newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveV2 *ReserveV2Session) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangePauser(&_ReserveV2.TransactOpts, newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangePauser(&_ReserveV2.TransactOpts, newPauser)
}

// ChangeTxFeeHelper is a paid mutator transaction binding the contract method 0xac5b54c2.
//
// Solidity: function changeTxFeeHelper(address newTxFee) returns()
func (_ReserveV2 *ReserveV2Transactor) ChangeTxFeeHelper(opts *bind.TransactOpts, newTxFee common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "changeTxFeeHelper", newTxFee)
}

// ChangeTxFeeHelper is a paid mutator transaction binding the contract method 0xac5b54c2.
//
// Solidity: function changeTxFeeHelper(address newTxFee) returns()
func (_ReserveV2 *ReserveV2Session) ChangeTxFeeHelper(newTxFee common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeTxFeeHelper(&_ReserveV2.TransactOpts, newTxFee)
}

// ChangeTxFeeHelper is a paid mutator transaction binding the contract method 0xac5b54c2.
//
// Solidity: function changeTxFeeHelper(address newTxFee) returns()
func (_ReserveV2 *ReserveV2TransactorSession) ChangeTxFeeHelper(newTxFee common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.ChangeTxFeeHelper(&_ReserveV2.TransactOpts, newTxFee)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveV2 *ReserveV2Transactor) CompleteHandoff(opts *bind.TransactOpts, previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "completeHandoff", previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveV2 *ReserveV2Session) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.CompleteHandoff(&_ReserveV2.TransactOpts, previousImplementation)
}

// CompleteHandoff is a paid mutator transaction binding the contract method 0x7f3c7b04.
//
// Solidity: function completeHandoff(address previousImplementation) returns()
func (_ReserveV2 *ReserveV2TransactorSession) CompleteHandoff(previousImplementation common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.CompleteHandoff(&_ReserveV2.TransactOpts, previousImplementation)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveV2 *ReserveV2Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveV2 *ReserveV2Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.DecreaseAllowance(&_ReserveV2.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveV2 *ReserveV2TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.DecreaseAllowance(&_ReserveV2.TransactOpts, spender, subtractedValue)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveV2 *ReserveV2Transactor) Freeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "freeze", account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveV2 *ReserveV2Session) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Freeze(&_ReserveV2.TransactOpts, account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveV2 *ReserveV2TransactorSession) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Freeze(&_ReserveV2.TransactOpts, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveV2 *ReserveV2Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveV2 *ReserveV2Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.IncreaseAllowance(&_ReserveV2.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveV2 *ReserveV2TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.IncreaseAllowance(&_ReserveV2.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2Transactor) Mint(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "mint", account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2Session) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Mint(&_ReserveV2.TransactOpts, account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveV2 *ReserveV2TransactorSession) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Mint(&_ReserveV2.TransactOpts, account, value)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveV2 *ReserveV2Transactor) NominateNewOwner(opts *bind.TransactOpts, nominee common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "nominateNewOwner", nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveV2 *ReserveV2Session) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.NominateNewOwner(&_ReserveV2.TransactOpts, nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveV2 *ReserveV2TransactorSession) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.NominateNewOwner(&_ReserveV2.TransactOpts, nominee)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveV2 *ReserveV2Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveV2 *ReserveV2Session) Pause() (*types.Transaction, error) {
	return _ReserveV2.Contract.Pause(&_ReserveV2.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveV2 *ReserveV2TransactorSession) Pause() (*types.Transaction, error) {
	return _ReserveV2.Contract.Pause(&_ReserveV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveV2 *ReserveV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveV2 *ReserveV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveV2.Contract.RenounceOwnership(&_ReserveV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveV2 *ReserveV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveV2.Contract.RenounceOwnership(&_ReserveV2.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Transfer(&_ReserveV2.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.Transfer(&_ReserveV2.TransactOpts, to, value)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveV2 *ReserveV2Transactor) TransferEternalStorage(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "transferEternalStorage", newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveV2 *ReserveV2Session) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.TransferEternalStorage(&_ReserveV2.TransactOpts, newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveV2 *ReserveV2TransactorSession) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.TransferEternalStorage(&_ReserveV2.TransactOpts, newOwner)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.TransferFrom(&_ReserveV2.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveV2 *ReserveV2TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveV2.Contract.TransferFrom(&_ReserveV2.TransactOpts, from, to, value)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveV2 *ReserveV2Transactor) Unfreeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "unfreeze", account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveV2 *ReserveV2Session) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Unfreeze(&_ReserveV2.TransactOpts, account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveV2 *ReserveV2TransactorSession) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Unfreeze(&_ReserveV2.TransactOpts, account)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveV2 *ReserveV2Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveV2 *ReserveV2Session) Unpause() (*types.Transaction, error) {
	return _ReserveV2.Contract.Unpause(&_ReserveV2.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveV2 *ReserveV2TransactorSession) Unpause() (*types.Transaction, error) {
	return _ReserveV2.Contract.Unpause(&_ReserveV2.TransactOpts)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveV2 *ReserveV2Transactor) Wipe(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveV2.contract.Transact(opts, "wipe", account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveV2 *ReserveV2Session) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Wipe(&_ReserveV2.TransactOpts, account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveV2 *ReserveV2TransactorSession) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveV2.Contract.Wipe(&_ReserveV2.TransactOpts, account)
}

// ReserveV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ReserveV2 contract.
type ReserveV2ApprovalIterator struct {
	Event *ReserveV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Approval represents a Approval event raised by the ReserveV2 contract.
type ReserveV2Approval struct {
	Holder  common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveV2 *ReserveV2Filterer) FilterApproval(opts *bind.FilterOpts, holder []common.Address, spender []common.Address) (*ReserveV2ApprovalIterator, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2ApprovalIterator{contract: _ReserveV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveV2 *ReserveV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ReserveV2Approval, holder []common.Address, spender []common.Address) (event.Subscription, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Approval)
				if err := _ReserveV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2FeeRecipientChangedIterator is returned from FilterFeeRecipientChanged and is used to iterate over the raw logs and unpacked data for FeeRecipientChanged events raised by the ReserveV2 contract.
type ReserveV2FeeRecipientChangedIterator struct {
	Event *ReserveV2FeeRecipientChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2FeeRecipientChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2FeeRecipientChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2FeeRecipientChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2FeeRecipientChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2FeeRecipientChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2FeeRecipientChanged represents a FeeRecipientChanged event raised by the ReserveV2 contract.
type ReserveV2FeeRecipientChanged struct {
	NewFeeRecipient common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterFeeRecipientChanged is a free log retrieval operation binding the contract event 0x167cccccc6e9b2892a740ec13fc1e51d3de8ea384f25bd87fee7412d588637e2.
//
// Solidity: event FeeRecipientChanged(address indexed newFeeRecipient)
func (_ReserveV2 *ReserveV2Filterer) FilterFeeRecipientChanged(opts *bind.FilterOpts, newFeeRecipient []common.Address) (*ReserveV2FeeRecipientChangedIterator, error) {

	var newFeeRecipientRule []interface{}
	for _, newFeeRecipientItem := range newFeeRecipient {
		newFeeRecipientRule = append(newFeeRecipientRule, newFeeRecipientItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "FeeRecipientChanged", newFeeRecipientRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2FeeRecipientChangedIterator{contract: _ReserveV2.contract, event: "FeeRecipientChanged", logs: logs, sub: sub}, nil
}

// WatchFeeRecipientChanged is a free log subscription operation binding the contract event 0x167cccccc6e9b2892a740ec13fc1e51d3de8ea384f25bd87fee7412d588637e2.
//
// Solidity: event FeeRecipientChanged(address indexed newFeeRecipient)
func (_ReserveV2 *ReserveV2Filterer) WatchFeeRecipientChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2FeeRecipientChanged, newFeeRecipient []common.Address) (event.Subscription, error) {

	var newFeeRecipientRule []interface{}
	for _, newFeeRecipientItem := range newFeeRecipient {
		newFeeRecipientRule = append(newFeeRecipientRule, newFeeRecipientItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "FeeRecipientChanged", newFeeRecipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2FeeRecipientChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "FeeRecipientChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2FreezerChangedIterator is returned from FilterFreezerChanged and is used to iterate over the raw logs and unpacked data for FreezerChanged events raised by the ReserveV2 contract.
type ReserveV2FreezerChangedIterator struct {
	Event *ReserveV2FreezerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2FreezerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2FreezerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2FreezerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2FreezerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2FreezerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2FreezerChanged represents a FreezerChanged event raised by the ReserveV2 contract.
type ReserveV2FreezerChanged struct {
	NewFreezer common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFreezerChanged is a free log retrieval operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveV2 *ReserveV2Filterer) FilterFreezerChanged(opts *bind.FilterOpts, newFreezer []common.Address) (*ReserveV2FreezerChangedIterator, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2FreezerChangedIterator{contract: _ReserveV2.contract, event: "FreezerChanged", logs: logs, sub: sub}, nil
}

// WatchFreezerChanged is a free log subscription operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveV2 *ReserveV2Filterer) WatchFreezerChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2FreezerChanged, newFreezer []common.Address) (event.Subscription, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2FreezerChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "FreezerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2FrozenIterator is returned from FilterFrozen and is used to iterate over the raw logs and unpacked data for Frozen events raised by the ReserveV2 contract.
type ReserveV2FrozenIterator struct {
	Event *ReserveV2Frozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2FrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Frozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Frozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2FrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2FrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Frozen represents a Frozen event raised by the ReserveV2 contract.
type ReserveV2Frozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFrozen is a free log retrieval operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveV2 *ReserveV2Filterer) FilterFrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveV2FrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2FrozenIterator{contract: _ReserveV2.contract, event: "Frozen", logs: logs, sub: sub}, nil
}

// WatchFrozen is a free log subscription operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveV2 *ReserveV2Filterer) WatchFrozen(opts *bind.WatchOpts, sink chan<- *ReserveV2Frozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Frozen)
				if err := _ReserveV2.contract.UnpackLog(event, "Frozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2MinterChangedIterator is returned from FilterMinterChanged and is used to iterate over the raw logs and unpacked data for MinterChanged events raised by the ReserveV2 contract.
type ReserveV2MinterChangedIterator struct {
	Event *ReserveV2MinterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2MinterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2MinterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2MinterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2MinterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2MinterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2MinterChanged represents a MinterChanged event raised by the ReserveV2 contract.
type ReserveV2MinterChanged struct {
	NewMinter common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinterChanged is a free log retrieval operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveV2 *ReserveV2Filterer) FilterMinterChanged(opts *bind.FilterOpts, newMinter []common.Address) (*ReserveV2MinterChangedIterator, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2MinterChangedIterator{contract: _ReserveV2.contract, event: "MinterChanged", logs: logs, sub: sub}, nil
}

// WatchMinterChanged is a free log subscription operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveV2 *ReserveV2Filterer) WatchMinterChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2MinterChanged, newMinter []common.Address) (event.Subscription, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2MinterChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "MinterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2NameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the ReserveV2 contract.
type ReserveV2NameChangedIterator struct {
	Event *ReserveV2NameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2NameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2NameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2NameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2NameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2NameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2NameChanged represents a NameChanged event raised by the ReserveV2 contract.
type ReserveV2NameChanged struct {
	NewName   string
	NewSymbol string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveV2 *ReserveV2Filterer) FilterNameChanged(opts *bind.FilterOpts) (*ReserveV2NameChangedIterator, error) {

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return &ReserveV2NameChangedIterator{contract: _ReserveV2.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveV2 *ReserveV2Filterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2NameChanged) (event.Subscription, error) {

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2NameChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2OwnerChangedIterator is returned from FilterOwnerChanged and is used to iterate over the raw logs and unpacked data for OwnerChanged events raised by the ReserveV2 contract.
type ReserveV2OwnerChangedIterator struct {
	Event *ReserveV2OwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2OwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2OwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2OwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2OwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2OwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2OwnerChanged represents a OwnerChanged event raised by the ReserveV2 contract.
type ReserveV2OwnerChanged struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerChanged is a free log retrieval operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveV2 *ReserveV2Filterer) FilterOwnerChanged(opts *bind.FilterOpts, newOwner []common.Address) (*ReserveV2OwnerChangedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2OwnerChangedIterator{contract: _ReserveV2.contract, event: "OwnerChanged", logs: logs, sub: sub}, nil
}

// WatchOwnerChanged is a free log subscription operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveV2 *ReserveV2Filterer) WatchOwnerChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2OwnerChanged, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2OwnerChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "OwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ReserveV2 contract.
type ReserveV2PausedIterator struct {
	Event *ReserveV2Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Paused represents a Paused event raised by the ReserveV2 contract.
type ReserveV2Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveV2 *ReserveV2Filterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ReserveV2PausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2PausedIterator{contract: _ReserveV2.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveV2 *ReserveV2Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ReserveV2Paused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Paused)
				if err := _ReserveV2.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2PauserChangedIterator is returned from FilterPauserChanged and is used to iterate over the raw logs and unpacked data for PauserChanged events raised by the ReserveV2 contract.
type ReserveV2PauserChangedIterator struct {
	Event *ReserveV2PauserChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2PauserChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2PauserChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2PauserChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2PauserChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2PauserChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2PauserChanged represents a PauserChanged event raised by the ReserveV2 contract.
type ReserveV2PauserChanged struct {
	NewPauser common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPauserChanged is a free log retrieval operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveV2 *ReserveV2Filterer) FilterPauserChanged(opts *bind.FilterOpts, newPauser []common.Address) (*ReserveV2PauserChangedIterator, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2PauserChangedIterator{contract: _ReserveV2.contract, event: "PauserChanged", logs: logs, sub: sub}, nil
}

// WatchPauserChanged is a free log subscription operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveV2 *ReserveV2Filterer) WatchPauserChanged(opts *bind.WatchOpts, sink chan<- *ReserveV2PauserChanged, newPauser []common.Address) (event.Subscription, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2PauserChanged)
				if err := _ReserveV2.contract.UnpackLog(event, "PauserChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ReserveV2 contract.
type ReserveV2TransferIterator struct {
	Event *ReserveV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Transfer represents a Transfer event raised by the ReserveV2 contract.
type ReserveV2Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveV2 *ReserveV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ReserveV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2TransferIterator{contract: _ReserveV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveV2 *ReserveV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ReserveV2Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Transfer)
				if err := _ReserveV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2UnfrozenIterator is returned from FilterUnfrozen and is used to iterate over the raw logs and unpacked data for Unfrozen events raised by the ReserveV2 contract.
type ReserveV2UnfrozenIterator struct {
	Event *ReserveV2Unfrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2UnfrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Unfrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Unfrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2UnfrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2UnfrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Unfrozen represents a Unfrozen event raised by the ReserveV2 contract.
type ReserveV2Unfrozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnfrozen is a free log retrieval operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveV2 *ReserveV2Filterer) FilterUnfrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveV2UnfrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2UnfrozenIterator{contract: _ReserveV2.contract, event: "Unfrozen", logs: logs, sub: sub}, nil
}

// WatchUnfrozen is a free log subscription operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveV2 *ReserveV2Filterer) WatchUnfrozen(opts *bind.WatchOpts, sink chan<- *ReserveV2Unfrozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Unfrozen)
				if err := _ReserveV2.contract.UnpackLog(event, "Unfrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ReserveV2 contract.
type ReserveV2UnpausedIterator struct {
	Event *ReserveV2Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Unpaused represents a Unpaused event raised by the ReserveV2 contract.
type ReserveV2Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveV2 *ReserveV2Filterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ReserveV2UnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2UnpausedIterator{contract: _ReserveV2.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveV2 *ReserveV2Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ReserveV2Unpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Unpaused)
				if err := _ReserveV2.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveV2WipedIterator is returned from FilterWiped and is used to iterate over the raw logs and unpacked data for Wiped events raised by the ReserveV2 contract.
type ReserveV2WipedIterator struct {
	Event *ReserveV2Wiped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveV2WipedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveV2Wiped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveV2Wiped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveV2WipedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveV2WipedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveV2Wiped represents a Wiped event raised by the ReserveV2 contract.
type ReserveV2Wiped struct {
	Freezer common.Address
	Wiped   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWiped is a free log retrieval operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveV2 *ReserveV2Filterer) FilterWiped(opts *bind.FilterOpts, freezer []common.Address, wiped []common.Address) (*ReserveV2WipedIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveV2.contract.FilterLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return &ReserveV2WipedIterator{contract: _ReserveV2.contract, event: "Wiped", logs: logs, sub: sub}, nil
}

// WatchWiped is a free log subscription operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveV2 *ReserveV2Filterer) WatchWiped(opts *bind.WatchOpts, sink chan<- *ReserveV2Wiped, freezer []common.Address, wiped []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveV2.contract.WatchLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveV2Wiped)
				if err := _ReserveV2.contract.UnpackLog(event, "Wiped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
