// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ManagerABI is the input ABI used to generate the binding from.
const ManagerABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_backing\",\"type\":\"uint256[]\"}],\"name\":\"proposeNewBasket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deWhitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rsvQuantity\",\"type\":\"uint256\"}],\"name\":\"toIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_useWhitelist\",\"type\":\"bool\"}],\"name\":\"setUseWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rsv\",\"type\":\"address\"}],\"name\":\"setRSV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seigniorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"requirementsForProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basketTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"name\":\"_amountsOut\",\"type\":\"uint256[]\"}],\"name\":\"proposeQuantitiesAdjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rsv\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rsvQuantity\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rsvQuantity\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"useWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seigniorage\",\"type\":\"uint256\"}],\"name\":\"setSegniorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"vaultAddr\",\"type\":\"address\"},{\"name\":\"rsvAddress\",\"type\":\"address\"},{\"name\":\"seigniorage_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DeWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RSVChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"SeigniorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// ManagerBin is the compiled bytecode used for deploying new contracts.
const ManagerBin = ``

// DeployManager deploys a new Ethereum contract, binding an instance of Manager to it.
func DeployManager(auth *bind.TransactOpts, backend bind.ContractBackend, vaultAddr common.Address, rsvAddress common.Address, seigniorage_ *big.Int) (common.Address, *types.Transaction, *Manager, error) {
	parsed, err := abi.JSON(strings.NewReader(ManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ManagerBin), backend, vaultAddr, rsvAddress, seigniorage_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Manager{ManagerCaller: ManagerCaller{contract: contract}, ManagerTransactor: ManagerTransactor{contract: contract}, ManagerFilterer: ManagerFilterer{contract: contract}}, nil
}

// Manager is an auto generated Go binding around an Ethereum contract.
type Manager struct {
	ManagerCaller     // Read-only binding to the contract
	ManagerTransactor // Write-only binding to the contract
	ManagerFilterer   // Log filterer for contract events
}

// ManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ManagerSession struct {
	Contract     *Manager          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ManagerCallerSession struct {
	Contract *ManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ManagerTransactorSession struct {
	Contract     *ManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ManagerRaw struct {
	Contract *Manager // Generic contract binding to access the raw methods on
}

// ManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ManagerCallerRaw struct {
	Contract *ManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ManagerTransactorRaw struct {
	Contract *ManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewManager creates a new instance of Manager, bound to a specific deployed contract.
func NewManager(address common.Address, backend bind.ContractBackend) (*Manager, error) {
	contract, err := bindManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Manager{ManagerCaller: ManagerCaller{contract: contract}, ManagerTransactor: ManagerTransactor{contract: contract}, ManagerFilterer: ManagerFilterer{contract: contract}}, nil
}

// NewManagerCaller creates a new read-only instance of Manager, bound to a specific deployed contract.
func NewManagerCaller(address common.Address, caller bind.ContractCaller) (*ManagerCaller, error) {
	contract, err := bindManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ManagerCaller{contract: contract}, nil
}

// NewManagerTransactor creates a new write-only instance of Manager, bound to a specific deployed contract.
func NewManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ManagerTransactor, error) {
	contract, err := bindManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ManagerTransactor{contract: contract}, nil
}

// NewManagerFilterer creates a new log filterer instance of Manager, bound to a specific deployed contract.
func NewManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ManagerFilterer, error) {
	contract, err := bindManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ManagerFilterer{contract: contract}, nil
}

// bindManager binds a generic wrapper to an already deployed contract.
func bindManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Manager *ManagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Manager.Contract.ManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Manager *ManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.Contract.ManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Manager *ManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Manager.Contract.ManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Manager *ManagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Manager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Manager *ManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Manager *ManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Manager.Contract.contract.Transact(opts, method, params...)
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Manager *ManagerCaller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "_nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Manager *ManagerSession) NominatedOwner() (common.Address, error) {
	return _Manager.Contract.NominatedOwner(&_Manager.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Manager *ManagerCallerSession) NominatedOwner() (common.Address, error) {
	return _Manager.Contract.NominatedOwner(&_Manager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Manager *ManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "_owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Manager *ManagerSession) Owner() (common.Address, error) {
	return _Manager.Contract.Owner(&_Manager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Manager *ManagerCallerSession) Owner() (common.Address, error) {
	return _Manager.Contract.Owner(&_Manager.CallOpts)
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Manager *ManagerCaller) Basket(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "basket")
	return *ret0, err
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Manager *ManagerSession) Basket() (common.Address, error) {
	return _Manager.Contract.Basket(&_Manager.CallOpts)
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Manager *ManagerCallerSession) Basket() (common.Address, error) {
	return _Manager.Contract.Basket(&_Manager.CallOpts)
}

// BasketTokens is a free data retrieval call binding the contract method 0x507a11e9.
//
// Solidity: function basketTokens() constant returns(address[])
func (_Manager *ManagerCaller) BasketTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "basketTokens")
	return *ret0, err
}

// BasketTokens is a free data retrieval call binding the contract method 0x507a11e9.
//
// Solidity: function basketTokens() constant returns(address[])
func (_Manager *ManagerSession) BasketTokens() ([]common.Address, error) {
	return _Manager.Contract.BasketTokens(&_Manager.CallOpts)
}

// BasketTokens is a free data retrieval call binding the contract method 0x507a11e9.
//
// Solidity: function basketTokens() constant returns(address[])
func (_Manager *ManagerCallerSession) BasketTokens() ([]common.Address, error) {
	return _Manager.Contract.BasketTokens(&_Manager.CallOpts)
}

// Delay is a free data retrieval call binding the contract method 0x6a42b8f8.
//
// Solidity: function delay() constant returns(uint256)
func (_Manager *ManagerCaller) Delay(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "delay")
	return *ret0, err
}

// Delay is a free data retrieval call binding the contract method 0x6a42b8f8.
//
// Solidity: function delay() constant returns(uint256)
func (_Manager *ManagerSession) Delay() (*big.Int, error) {
	return _Manager.Contract.Delay(&_Manager.CallOpts)
}

// Delay is a free data retrieval call binding the contract method 0x6a42b8f8.
//
// Solidity: function delay() constant returns(uint256)
func (_Manager *ManagerCallerSession) Delay() (*big.Int, error) {
	return _Manager.Contract.Delay(&_Manager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Manager *ManagerCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Manager *ManagerSession) Paused() (bool, error) {
	return _Manager.Contract.Paused(&_Manager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Manager *ManagerCallerSession) Paused() (bool, error) {
	return _Manager.Contract.Paused(&_Manager.CallOpts)
}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) constant returns(address)
func (_Manager *ManagerCaller) Proposals(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "proposals", arg0)
	return *ret0, err
}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) constant returns(address)
func (_Manager *ManagerSession) Proposals(arg0 *big.Int) (common.Address, error) {
	return _Manager.Contract.Proposals(&_Manager.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) constant returns(address)
func (_Manager *ManagerCallerSession) Proposals(arg0 *big.Int) (common.Address, error) {
	return _Manager.Contract.Proposals(&_Manager.CallOpts, arg0)
}

// ProposalsLength is a free data retrieval call binding the contract method 0x44c7c867.
//
// Solidity: function proposalsLength() constant returns(uint256)
func (_Manager *ManagerCaller) ProposalsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "proposalsLength")
	return *ret0, err
}

// ProposalsLength is a free data retrieval call binding the contract method 0x44c7c867.
//
// Solidity: function proposalsLength() constant returns(uint256)
func (_Manager *ManagerSession) ProposalsLength() (*big.Int, error) {
	return _Manager.Contract.ProposalsLength(&_Manager.CallOpts)
}

// ProposalsLength is a free data retrieval call binding the contract method 0x44c7c867.
//
// Solidity: function proposalsLength() constant returns(uint256)
func (_Manager *ManagerCallerSession) ProposalsLength() (*big.Int, error) {
	return _Manager.Contract.ProposalsLength(&_Manager.CallOpts)
}

// RequirementsForProposal is a free data retrieval call binding the contract method 0x4e679bb7.
//
// Solidity: function requirementsForProposal(uint256 _proposalID) constant returns(address[], uint256[])
func (_Manager *ManagerCaller) RequirementsForProposal(opts *bind.CallOpts, _proposalID *big.Int) ([]common.Address, []*big.Int, error) {
	var (
		ret0 = new([]common.Address)
		ret1 = new([]*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Manager.contract.Call(opts, out, "requirementsForProposal", _proposalID)
	return *ret0, *ret1, err
}

// RequirementsForProposal is a free data retrieval call binding the contract method 0x4e679bb7.
//
// Solidity: function requirementsForProposal(uint256 _proposalID) constant returns(address[], uint256[])
func (_Manager *ManagerSession) RequirementsForProposal(_proposalID *big.Int) ([]common.Address, []*big.Int, error) {
	return _Manager.Contract.RequirementsForProposal(&_Manager.CallOpts, _proposalID)
}

// RequirementsForProposal is a free data retrieval call binding the contract method 0x4e679bb7.
//
// Solidity: function requirementsForProposal(uint256 _proposalID) constant returns(address[], uint256[])
func (_Manager *ManagerCallerSession) RequirementsForProposal(_proposalID *big.Int) ([]common.Address, []*big.Int, error) {
	return _Manager.Contract.RequirementsForProposal(&_Manager.CallOpts, _proposalID)
}

// Rsv is a free data retrieval call binding the contract method 0xca38936e.
//
// Solidity: function rsv() constant returns(address)
func (_Manager *ManagerCaller) Rsv(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "rsv")
	return *ret0, err
}

// Rsv is a free data retrieval call binding the contract method 0xca38936e.
//
// Solidity: function rsv() constant returns(address)
func (_Manager *ManagerSession) Rsv() (common.Address, error) {
	return _Manager.Contract.Rsv(&_Manager.CallOpts)
}

// Rsv is a free data retrieval call binding the contract method 0xca38936e.
//
// Solidity: function rsv() constant returns(address)
func (_Manager *ManagerCallerSession) Rsv() (common.Address, error) {
	return _Manager.Contract.Rsv(&_Manager.CallOpts)
}

// Seigniorage is a free data retrieval call binding the contract method 0x4e1d9df5.
//
// Solidity: function seigniorage() constant returns(uint256)
func (_Manager *ManagerCaller) Seigniorage(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "seigniorage")
	return *ret0, err
}

// Seigniorage is a free data retrieval call binding the contract method 0x4e1d9df5.
//
// Solidity: function seigniorage() constant returns(uint256)
func (_Manager *ManagerSession) Seigniorage() (*big.Int, error) {
	return _Manager.Contract.Seigniorage(&_Manager.CallOpts)
}

// Seigniorage is a free data retrieval call binding the contract method 0x4e1d9df5.
//
// Solidity: function seigniorage() constant returns(uint256)
func (_Manager *ManagerCallerSession) Seigniorage() (*big.Int, error) {
	return _Manager.Contract.Seigniorage(&_Manager.CallOpts)
}

// ToIssue is a free data retrieval call binding the contract method 0x1d9afe5e.
//
// Solidity: function toIssue(uint256 _rsvQuantity) constant returns(uint256[])
func (_Manager *ManagerCaller) ToIssue(opts *bind.CallOpts, _rsvQuantity *big.Int) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "toIssue", _rsvQuantity)
	return *ret0, err
}

// ToIssue is a free data retrieval call binding the contract method 0x1d9afe5e.
//
// Solidity: function toIssue(uint256 _rsvQuantity) constant returns(uint256[])
func (_Manager *ManagerSession) ToIssue(_rsvQuantity *big.Int) ([]*big.Int, error) {
	return _Manager.Contract.ToIssue(&_Manager.CallOpts, _rsvQuantity)
}

// ToIssue is a free data retrieval call binding the contract method 0x1d9afe5e.
//
// Solidity: function toIssue(uint256 _rsvQuantity) constant returns(uint256[])
func (_Manager *ManagerCallerSession) ToIssue(_rsvQuantity *big.Int) ([]*big.Int, error) {
	return _Manager.Contract.ToIssue(&_Manager.CallOpts, _rsvQuantity)
}

// UseWhitelist is a free data retrieval call binding the contract method 0xe630025a.
//
// Solidity: function useWhitelist() constant returns(bool)
func (_Manager *ManagerCaller) UseWhitelist(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "useWhitelist")
	return *ret0, err
}

// UseWhitelist is a free data retrieval call binding the contract method 0xe630025a.
//
// Solidity: function useWhitelist() constant returns(bool)
func (_Manager *ManagerSession) UseWhitelist() (bool, error) {
	return _Manager.Contract.UseWhitelist(&_Manager.CallOpts)
}

// UseWhitelist is a free data retrieval call binding the contract method 0xe630025a.
//
// Solidity: function useWhitelist() constant returns(bool)
func (_Manager *ManagerCallerSession) UseWhitelist() (bool, error) {
	return _Manager.Contract.UseWhitelist(&_Manager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() constant returns(address)
func (_Manager *ManagerCaller) Vault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "vault")
	return *ret0, err
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() constant returns(address)
func (_Manager *ManagerSession) Vault() (common.Address, error) {
	return _Manager.Contract.Vault(&_Manager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() constant returns(address)
func (_Manager *ManagerCallerSession) Vault() (common.Address, error) {
	return _Manager.Contract.Vault(&_Manager.CallOpts)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) constant returns(bool)
func (_Manager *ManagerCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Manager.contract.Call(opts, out, "whitelist", arg0)
	return *ret0, err
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) constant returns(bool)
func (_Manager *ManagerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Manager.Contract.Whitelist(&_Manager.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) constant returns(bool)
func (_Manager *ManagerCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Manager.Contract.Whitelist(&_Manager.CallOpts, arg0)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Manager *ManagerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Manager *ManagerSession) AcceptOwnership() (*types.Transaction, error) {
	return _Manager.Contract.AcceptOwnership(&_Manager.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Manager *ManagerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Manager.Contract.AcceptOwnership(&_Manager.TransactOpts)
}

// AcceptProposal is a paid mutator transaction binding the contract method 0x60c5cc3a.
//
// Solidity: function acceptProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactor) AcceptProposal(opts *bind.TransactOpts, _proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "acceptProposal", _proposalID)
}

// AcceptProposal is a paid mutator transaction binding the contract method 0x60c5cc3a.
//
// Solidity: function acceptProposal(uint256 _proposalID) returns()
func (_Manager *ManagerSession) AcceptProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.AcceptProposal(&_Manager.TransactOpts, _proposalID)
}

// AcceptProposal is a paid mutator transaction binding the contract method 0x60c5cc3a.
//
// Solidity: function acceptProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactorSession) AcceptProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.AcceptProposal(&_Manager.TransactOpts, _proposalID)
}

// CancelProposal is a paid mutator transaction binding the contract method 0xe0a8f6f5.
//
// Solidity: function cancelProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactor) CancelProposal(opts *bind.TransactOpts, _proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "cancelProposal", _proposalID)
}

// CancelProposal is a paid mutator transaction binding the contract method 0xe0a8f6f5.
//
// Solidity: function cancelProposal(uint256 _proposalID) returns()
func (_Manager *ManagerSession) CancelProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.CancelProposal(&_Manager.TransactOpts, _proposalID)
}

// CancelProposal is a paid mutator transaction binding the contract method 0xe0a8f6f5.
//
// Solidity: function cancelProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactorSession) CancelProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.CancelProposal(&_Manager.TransactOpts, _proposalID)
}

// ClearProposals is a paid mutator transaction binding the contract method 0x5d3e9deb.
//
// Solidity: function clearProposals() returns()
func (_Manager *ManagerTransactor) ClearProposals(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "clearProposals")
}

// ClearProposals is a paid mutator transaction binding the contract method 0x5d3e9deb.
//
// Solidity: function clearProposals() returns()
func (_Manager *ManagerSession) ClearProposals() (*types.Transaction, error) {
	return _Manager.Contract.ClearProposals(&_Manager.TransactOpts)
}

// ClearProposals is a paid mutator transaction binding the contract method 0x5d3e9deb.
//
// Solidity: function clearProposals() returns()
func (_Manager *ManagerTransactorSession) ClearProposals() (*types.Transaction, error) {
	return _Manager.Contract.ClearProposals(&_Manager.TransactOpts)
}

// DeWhitelistAccount is a paid mutator transaction binding the contract method 0x135d19c7.
//
// Solidity: function deWhitelistAccount(address _user) returns()
func (_Manager *ManagerTransactor) DeWhitelistAccount(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "deWhitelistAccount", _user)
}

// DeWhitelistAccount is a paid mutator transaction binding the contract method 0x135d19c7.
//
// Solidity: function deWhitelistAccount(address _user) returns()
func (_Manager *ManagerSession) DeWhitelistAccount(_user common.Address) (*types.Transaction, error) {
	return _Manager.Contract.DeWhitelistAccount(&_Manager.TransactOpts, _user)
}

// DeWhitelistAccount is a paid mutator transaction binding the contract method 0x135d19c7.
//
// Solidity: function deWhitelistAccount(address _user) returns()
func (_Manager *ManagerTransactorSession) DeWhitelistAccount(_user common.Address) (*types.Transaction, error) {
	return _Manager.Contract.DeWhitelistAccount(&_Manager.TransactOpts, _user)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0d61b519.
//
// Solidity: function executeProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactor) ExecuteProposal(opts *bind.TransactOpts, _proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "executeProposal", _proposalID)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0d61b519.
//
// Solidity: function executeProposal(uint256 _proposalID) returns()
func (_Manager *ManagerSession) ExecuteProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ExecuteProposal(&_Manager.TransactOpts, _proposalID)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x0d61b519.
//
// Solidity: function executeProposal(uint256 _proposalID) returns()
func (_Manager *ManagerTransactorSession) ExecuteProposal(_proposalID *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ExecuteProposal(&_Manager.TransactOpts, _proposalID)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _rsvQuantity) returns()
func (_Manager *ManagerTransactor) Issue(opts *bind.TransactOpts, _rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "issue", _rsvQuantity)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _rsvQuantity) returns()
func (_Manager *ManagerSession) Issue(_rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.Issue(&_Manager.TransactOpts, _rsvQuantity)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _rsvQuantity) returns()
func (_Manager *ManagerTransactorSession) Issue(_rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.Issue(&_Manager.TransactOpts, _rsvQuantity)
}

// IssueMax is a paid mutator transaction binding the contract method 0x2cadcc8c.
//
// Solidity: function issueMax() returns()
func (_Manager *ManagerTransactor) IssueMax(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "issueMax")
}

// IssueMax is a paid mutator transaction binding the contract method 0x2cadcc8c.
//
// Solidity: function issueMax() returns()
func (_Manager *ManagerSession) IssueMax() (*types.Transaction, error) {
	return _Manager.Contract.IssueMax(&_Manager.TransactOpts)
}

// IssueMax is a paid mutator transaction binding the contract method 0x2cadcc8c.
//
// Solidity: function issueMax() returns()
func (_Manager *ManagerTransactorSession) IssueMax() (*types.Transaction, error) {
	return _Manager.Contract.IssueMax(&_Manager.TransactOpts)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Manager *ManagerTransactor) NominateNewOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "nominateNewOwner", newOwner)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Manager *ManagerSession) NominateNewOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Manager.Contract.NominateNewOwner(&_Manager.TransactOpts, newOwner)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Manager *ManagerTransactorSession) NominateNewOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Manager.Contract.NominateNewOwner(&_Manager.TransactOpts, newOwner)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Manager *ManagerTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Manager *ManagerSession) Pause() (*types.Transaction, error) {
	return _Manager.Contract.Pause(&_Manager.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Manager *ManagerTransactorSession) Pause() (*types.Transaction, error) {
	return _Manager.Contract.Pause(&_Manager.TransactOpts)
}

// ProposeNewBasket is a paid mutator transaction binding the contract method 0x12867e2a.
//
// Solidity: function proposeNewBasket(address[] _tokens, uint256[] _backing) returns(uint256)
func (_Manager *ManagerTransactor) ProposeNewBasket(opts *bind.TransactOpts, _tokens []common.Address, _backing []*big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "proposeNewBasket", _tokens, _backing)
}

// ProposeNewBasket is a paid mutator transaction binding the contract method 0x12867e2a.
//
// Solidity: function proposeNewBasket(address[] _tokens, uint256[] _backing) returns(uint256)
func (_Manager *ManagerSession) ProposeNewBasket(_tokens []common.Address, _backing []*big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ProposeNewBasket(&_Manager.TransactOpts, _tokens, _backing)
}

// ProposeNewBasket is a paid mutator transaction binding the contract method 0x12867e2a.
//
// Solidity: function proposeNewBasket(address[] _tokens, uint256[] _backing) returns(uint256)
func (_Manager *ManagerTransactorSession) ProposeNewBasket(_tokens []common.Address, _backing []*big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ProposeNewBasket(&_Manager.TransactOpts, _tokens, _backing)
}

// ProposeQuantitiesAdjustment is a paid mutator transaction binding the contract method 0x6f847f86.
//
// Solidity: function proposeQuantitiesAdjustment(uint256[] _amountsIn, uint256[] _amountsOut) returns(uint256)
func (_Manager *ManagerTransactor) ProposeQuantitiesAdjustment(opts *bind.TransactOpts, _amountsIn []*big.Int, _amountsOut []*big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "proposeQuantitiesAdjustment", _amountsIn, _amountsOut)
}

// ProposeQuantitiesAdjustment is a paid mutator transaction binding the contract method 0x6f847f86.
//
// Solidity: function proposeQuantitiesAdjustment(uint256[] _amountsIn, uint256[] _amountsOut) returns(uint256)
func (_Manager *ManagerSession) ProposeQuantitiesAdjustment(_amountsIn []*big.Int, _amountsOut []*big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ProposeQuantitiesAdjustment(&_Manager.TransactOpts, _amountsIn, _amountsOut)
}

// ProposeQuantitiesAdjustment is a paid mutator transaction binding the contract method 0x6f847f86.
//
// Solidity: function proposeQuantitiesAdjustment(uint256[] _amountsIn, uint256[] _amountsOut) returns(uint256)
func (_Manager *ManagerTransactorSession) ProposeQuantitiesAdjustment(_amountsIn []*big.Int, _amountsOut []*big.Int) (*types.Transaction, error) {
	return _Manager.Contract.ProposeQuantitiesAdjustment(&_Manager.TransactOpts, _amountsIn, _amountsOut)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _rsvQuantity) returns()
func (_Manager *ManagerTransactor) Redeem(opts *bind.TransactOpts, _rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "redeem", _rsvQuantity)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _rsvQuantity) returns()
func (_Manager *ManagerSession) Redeem(_rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.Redeem(&_Manager.TransactOpts, _rsvQuantity)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _rsvQuantity) returns()
func (_Manager *ManagerTransactorSession) Redeem(_rsvQuantity *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.Redeem(&_Manager.TransactOpts, _rsvQuantity)
}

// RedeemMax is a paid mutator transaction binding the contract method 0xa62f723c.
//
// Solidity: function redeemMax() returns()
func (_Manager *ManagerTransactor) RedeemMax(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "redeemMax")
}

// RedeemMax is a paid mutator transaction binding the contract method 0xa62f723c.
//
// Solidity: function redeemMax() returns()
func (_Manager *ManagerSession) RedeemMax() (*types.Transaction, error) {
	return _Manager.Contract.RedeemMax(&_Manager.TransactOpts)
}

// RedeemMax is a paid mutator transaction binding the contract method 0xa62f723c.
//
// Solidity: function redeemMax() returns()
func (_Manager *ManagerTransactorSession) RedeemMax() (*types.Transaction, error) {
	return _Manager.Contract.RedeemMax(&_Manager.TransactOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Manager *ManagerTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Manager *ManagerSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetOperator(&_Manager.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Manager *ManagerTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetOperator(&_Manager.TransactOpts, _operator)
}

// SetRSV is a paid mutator transaction binding the contract method 0x405d61d7.
//
// Solidity: function setRSV(address _rsv) returns()
func (_Manager *ManagerTransactor) SetRSV(opts *bind.TransactOpts, _rsv common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setRSV", _rsv)
}

// SetRSV is a paid mutator transaction binding the contract method 0x405d61d7.
//
// Solidity: function setRSV(address _rsv) returns()
func (_Manager *ManagerSession) SetRSV(_rsv common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetRSV(&_Manager.TransactOpts, _rsv)
}

// SetRSV is a paid mutator transaction binding the contract method 0x405d61d7.
//
// Solidity: function setRSV(address _rsv) returns()
func (_Manager *ManagerTransactorSession) SetRSV(_rsv common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetRSV(&_Manager.TransactOpts, _rsv)
}

// SetSegniorage is a paid mutator transaction binding the contract method 0xecc3aae6.
//
// Solidity: function setSegniorage(uint256 _seigniorage) returns()
func (_Manager *ManagerTransactor) SetSegniorage(opts *bind.TransactOpts, _seigniorage *big.Int) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setSegniorage", _seigniorage)
}

// SetSegniorage is a paid mutator transaction binding the contract method 0xecc3aae6.
//
// Solidity: function setSegniorage(uint256 _seigniorage) returns()
func (_Manager *ManagerSession) SetSegniorage(_seigniorage *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.SetSegniorage(&_Manager.TransactOpts, _seigniorage)
}

// SetSegniorage is a paid mutator transaction binding the contract method 0xecc3aae6.
//
// Solidity: function setSegniorage(uint256 _seigniorage) returns()
func (_Manager *ManagerTransactorSession) SetSegniorage(_seigniorage *big.Int) (*types.Transaction, error) {
	return _Manager.Contract.SetSegniorage(&_Manager.TransactOpts, _seigniorage)
}

// SetUseWhitelist is a paid mutator transaction binding the contract method 0x2b205dc9.
//
// Solidity: function setUseWhitelist(bool _useWhitelist) returns()
func (_Manager *ManagerTransactor) SetUseWhitelist(opts *bind.TransactOpts, _useWhitelist bool) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setUseWhitelist", _useWhitelist)
}

// SetUseWhitelist is a paid mutator transaction binding the contract method 0x2b205dc9.
//
// Solidity: function setUseWhitelist(bool _useWhitelist) returns()
func (_Manager *ManagerSession) SetUseWhitelist(_useWhitelist bool) (*types.Transaction, error) {
	return _Manager.Contract.SetUseWhitelist(&_Manager.TransactOpts, _useWhitelist)
}

// SetUseWhitelist is a paid mutator transaction binding the contract method 0x2b205dc9.
//
// Solidity: function setUseWhitelist(bool _useWhitelist) returns()
func (_Manager *ManagerTransactorSession) SetUseWhitelist(_useWhitelist bool) (*types.Transaction, error) {
	return _Manager.Contract.SetUseWhitelist(&_Manager.TransactOpts, _useWhitelist)
}

// SetVault is a paid mutator transaction binding the contract method 0x6817031b.
//
// Solidity: function setVault(address _vault) returns()
func (_Manager *ManagerTransactor) SetVault(opts *bind.TransactOpts, _vault common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "setVault", _vault)
}

// SetVault is a paid mutator transaction binding the contract method 0x6817031b.
//
// Solidity: function setVault(address _vault) returns()
func (_Manager *ManagerSession) SetVault(_vault common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVault(&_Manager.TransactOpts, _vault)
}

// SetVault is a paid mutator transaction binding the contract method 0x6817031b.
//
// Solidity: function setVault(address _vault) returns()
func (_Manager *ManagerTransactorSession) SetVault(_vault common.Address) (*types.Transaction, error) {
	return _Manager.Contract.SetVault(&_Manager.TransactOpts, _vault)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Manager *ManagerTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Manager *ManagerSession) Unpause() (*types.Transaction, error) {
	return _Manager.Contract.Unpause(&_Manager.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Manager *ManagerTransactorSession) Unpause() (*types.Transaction, error) {
	return _Manager.Contract.Unpause(&_Manager.TransactOpts)
}

// WhitelistAccount is a paid mutator transaction binding the contract method 0x63e0c2f8.
//
// Solidity: function whitelistAccount(address _user) returns()
func (_Manager *ManagerTransactor) WhitelistAccount(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _Manager.contract.Transact(opts, "whitelistAccount", _user)
}

// WhitelistAccount is a paid mutator transaction binding the contract method 0x63e0c2f8.
//
// Solidity: function whitelistAccount(address _user) returns()
func (_Manager *ManagerSession) WhitelistAccount(_user common.Address) (*types.Transaction, error) {
	return _Manager.Contract.WhitelistAccount(&_Manager.TransactOpts, _user)
}

// WhitelistAccount is a paid mutator transaction binding the contract method 0x63e0c2f8.
//
// Solidity: function whitelistAccount(address _user) returns()
func (_Manager *ManagerTransactorSession) WhitelistAccount(_user common.Address) (*types.Transaction, error) {
	return _Manager.Contract.WhitelistAccount(&_Manager.TransactOpts, _user)
}

// ManagerDeWhitelistedIterator is returned from FilterDeWhitelisted and is used to iterate over the raw logs and unpacked data for DeWhitelisted events raised by the Manager contract.
type ManagerDeWhitelistedIterator struct {
	Event *ManagerDeWhitelisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerDeWhitelistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerDeWhitelisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerDeWhitelisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerDeWhitelistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerDeWhitelistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerDeWhitelisted represents a DeWhitelisted event raised by the Manager contract.
type ManagerDeWhitelisted struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDeWhitelisted is a free log retrieval operation binding the contract event 0xea592933e1a0c057f8b0807435fa3d61d8c2f5afb5f860d39708e7a36268c0d3.
//
// Solidity: event DeWhitelisted(address indexed user)
func (_Manager *ManagerFilterer) FilterDeWhitelisted(opts *bind.FilterOpts, user []common.Address) (*ManagerDeWhitelistedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "DeWhitelisted", userRule)
	if err != nil {
		return nil, err
	}
	return &ManagerDeWhitelistedIterator{contract: _Manager.contract, event: "DeWhitelisted", logs: logs, sub: sub}, nil
}

// WatchDeWhitelisted is a free log subscription operation binding the contract event 0xea592933e1a0c057f8b0807435fa3d61d8c2f5afb5f860d39708e7a36268c0d3.
//
// Solidity: event DeWhitelisted(address indexed user)
func (_Manager *ManagerFilterer) WatchDeWhitelisted(opts *bind.WatchOpts, sink chan<- *ManagerDeWhitelisted, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "DeWhitelisted", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerDeWhitelisted)
				if err := _Manager.contract.UnpackLog(event, "DeWhitelisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerIssuanceIterator is returned from FilterIssuance and is used to iterate over the raw logs and unpacked data for Issuance events raised by the Manager contract.
type ManagerIssuanceIterator struct {
	Event *ManagerIssuance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerIssuanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerIssuance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerIssuance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerIssuanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerIssuanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerIssuance represents a Issuance event raised by the Manager contract.
type ManagerIssuance struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuance is a free log retrieval operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: event Issuance(address indexed user, uint256 indexed amount)
func (_Manager *ManagerFilterer) FilterIssuance(opts *bind.FilterOpts, user []common.Address, amount []*big.Int) (*ManagerIssuanceIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "Issuance", userRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerIssuanceIterator{contract: _Manager.contract, event: "Issuance", logs: logs, sub: sub}, nil
}

// WatchIssuance is a free log subscription operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: event Issuance(address indexed user, uint256 indexed amount)
func (_Manager *ManagerFilterer) WatchIssuance(opts *bind.WatchOpts, sink chan<- *ManagerIssuance, user []common.Address, amount []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "Issuance", userRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerIssuance)
				if err := _Manager.contract.UnpackLog(event, "Issuance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerNewOwnerNominatedIterator is returned from FilterNewOwnerNominated and is used to iterate over the raw logs and unpacked data for NewOwnerNominated events raised by the Manager contract.
type ManagerNewOwnerNominatedIterator struct {
	Event *ManagerNewOwnerNominated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerNewOwnerNominatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerNewOwnerNominated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerNewOwnerNominated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerNewOwnerNominatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerNewOwnerNominatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerNewOwnerNominated represents a NewOwnerNominated event raised by the Manager contract.
type ManagerNewOwnerNominated struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewOwnerNominated is a free log retrieval operation binding the contract event 0xb59bab42c554cfd49f4f001c983b6ed93ede25748b10114b7d1cb1b3c97df7af.
//
// Solidity: event NewOwnerNominated(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) FilterNewOwnerNominated(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManagerNewOwnerNominatedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "NewOwnerNominated", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ManagerNewOwnerNominatedIterator{contract: _Manager.contract, event: "NewOwnerNominated", logs: logs, sub: sub}, nil
}

// WatchNewOwnerNominated is a free log subscription operation binding the contract event 0xb59bab42c554cfd49f4f001c983b6ed93ede25748b10114b7d1cb1b3c97df7af.
//
// Solidity: event NewOwnerNominated(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) WatchNewOwnerNominated(opts *bind.WatchOpts, sink chan<- *ManagerNewOwnerNominated, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "NewOwnerNominated", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerNewOwnerNominated)
				if err := _Manager.contract.UnpackLog(event, "NewOwnerNominated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerOperatorChangedIterator is returned from FilterOperatorChanged and is used to iterate over the raw logs and unpacked data for OperatorChanged events raised by the Manager contract.
type ManagerOperatorChangedIterator struct {
	Event *ManagerOperatorChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerOperatorChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerOperatorChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerOperatorChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerOperatorChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerOperatorChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerOperatorChanged represents a OperatorChanged event raised by the Manager contract.
type ManagerOperatorChanged struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOperatorChanged is a free log retrieval operation binding the contract event 0x4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e54.
//
// Solidity: event OperatorChanged(address indexed account)
func (_Manager *ManagerFilterer) FilterOperatorChanged(opts *bind.FilterOpts, account []common.Address) (*ManagerOperatorChangedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "OperatorChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerOperatorChangedIterator{contract: _Manager.contract, event: "OperatorChanged", logs: logs, sub: sub}, nil
}

// WatchOperatorChanged is a free log subscription operation binding the contract event 0x4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e54.
//
// Solidity: event OperatorChanged(address indexed account)
func (_Manager *ManagerFilterer) WatchOperatorChanged(opts *bind.WatchOpts, sink chan<- *ManagerOperatorChanged, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "OperatorChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerOperatorChanged)
				if err := _Manager.contract.UnpackLog(event, "OperatorChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Manager contract.
type ManagerOwnershipTransferredIterator struct {
	Event *ManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerOwnershipTransferred represents a OwnershipTransferred event raised by the Manager contract.
type ManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ManagerOwnershipTransferredIterator{contract: _Manager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Manager *ManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerOwnershipTransferred)
				if err := _Manager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Manager contract.
type ManagerPausedIterator struct {
	Event *ManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerPaused represents a Paused event raised by the Manager contract.
type ManagerPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_Manager *ManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerPausedIterator{contract: _Manager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_Manager *ManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerPaused)
				if err := _Manager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerProposalsClearedIterator is returned from FilterProposalsCleared and is used to iterate over the raw logs and unpacked data for ProposalsCleared events raised by the Manager contract.
type ManagerProposalsClearedIterator struct {
	Event *ManagerProposalsCleared // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerProposalsClearedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerProposalsCleared)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerProposalsCleared)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerProposalsClearedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerProposalsClearedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerProposalsCleared represents a ProposalsCleared event raised by the Manager contract.
type ManagerProposalsCleared struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterProposalsCleared is a free log retrieval operation binding the contract event 0xe89b7d17759242abd80309cee2479e2cd462f8a25d06a0f90fba1de050de6623.
//
// Solidity: event ProposalsCleared()
func (_Manager *ManagerFilterer) FilterProposalsCleared(opts *bind.FilterOpts) (*ManagerProposalsClearedIterator, error) {

	logs, sub, err := _Manager.contract.FilterLogs(opts, "ProposalsCleared")
	if err != nil {
		return nil, err
	}
	return &ManagerProposalsClearedIterator{contract: _Manager.contract, event: "ProposalsCleared", logs: logs, sub: sub}, nil
}

// WatchProposalsCleared is a free log subscription operation binding the contract event 0xe89b7d17759242abd80309cee2479e2cd462f8a25d06a0f90fba1de050de6623.
//
// Solidity: event ProposalsCleared()
func (_Manager *ManagerFilterer) WatchProposalsCleared(opts *bind.WatchOpts, sink chan<- *ManagerProposalsCleared) (event.Subscription, error) {

	logs, sub, err := _Manager.contract.WatchLogs(opts, "ProposalsCleared")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerProposalsCleared)
				if err := _Manager.contract.UnpackLog(event, "ProposalsCleared", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerRSVChangedIterator is returned from FilterRSVChanged and is used to iterate over the raw logs and unpacked data for RSVChanged events raised by the Manager contract.
type ManagerRSVChangedIterator struct {
	Event *ManagerRSVChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerRSVChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerRSVChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerRSVChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerRSVChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerRSVChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerRSVChanged represents a RSVChanged event raised by the Manager contract.
type ManagerRSVChanged struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRSVChanged is a free log retrieval operation binding the contract event 0x439ce0c367c25c0aaf98743becfd020f9403ba4575882d608ed696f1de63ba63.
//
// Solidity: event RSVChanged(address indexed account)
func (_Manager *ManagerFilterer) FilterRSVChanged(opts *bind.FilterOpts, account []common.Address) (*ManagerRSVChangedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "RSVChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerRSVChangedIterator{contract: _Manager.contract, event: "RSVChanged", logs: logs, sub: sub}, nil
}

// WatchRSVChanged is a free log subscription operation binding the contract event 0x439ce0c367c25c0aaf98743becfd020f9403ba4575882d608ed696f1de63ba63.
//
// Solidity: event RSVChanged(address indexed account)
func (_Manager *ManagerFilterer) WatchRSVChanged(opts *bind.WatchOpts, sink chan<- *ManagerRSVChanged, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "RSVChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerRSVChanged)
				if err := _Manager.contract.UnpackLog(event, "RSVChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerRedemptionIterator is returned from FilterRedemption and is used to iterate over the raw logs and unpacked data for Redemption events raised by the Manager contract.
type ManagerRedemptionIterator struct {
	Event *ManagerRedemption // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerRedemptionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerRedemption)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerRedemption)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerRedemptionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerRedemptionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerRedemption represents a Redemption event raised by the Manager contract.
type ManagerRedemption struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRedemption is a free log retrieval operation binding the contract event 0xe6c82503aaaa3db78b70f183901ae8668918f895b3982b2c851cf2ffe0c6c639.
//
// Solidity: event Redemption(address indexed user, uint256 indexed amount)
func (_Manager *ManagerFilterer) FilterRedemption(opts *bind.FilterOpts, user []common.Address, amount []*big.Int) (*ManagerRedemptionIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "Redemption", userRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerRedemptionIterator{contract: _Manager.contract, event: "Redemption", logs: logs, sub: sub}, nil
}

// WatchRedemption is a free log subscription operation binding the contract event 0xe6c82503aaaa3db78b70f183901ae8668918f895b3982b2c851cf2ffe0c6c639.
//
// Solidity: event Redemption(address indexed user, uint256 indexed amount)
func (_Manager *ManagerFilterer) WatchRedemption(opts *bind.WatchOpts, sink chan<- *ManagerRedemption, user []common.Address, amount []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "Redemption", userRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerRedemption)
				if err := _Manager.contract.UnpackLog(event, "Redemption", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerSeigniorageChangedIterator is returned from FilterSeigniorageChanged and is used to iterate over the raw logs and unpacked data for SeigniorageChanged events raised by the Manager contract.
type ManagerSeigniorageChangedIterator struct {
	Event *ManagerSeigniorageChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerSeigniorageChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerSeigniorageChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerSeigniorageChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerSeigniorageChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerSeigniorageChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerSeigniorageChanged represents a SeigniorageChanged event raised by the Manager contract.
type ManagerSeigniorageChanged struct {
	OldVal *big.Int
	NewVal *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSeigniorageChanged is a free log retrieval operation binding the contract event 0x739fc76c925698caa5b5b65517fbbf8148d051b676bfac3769c10dc9f146a751.
//
// Solidity: event SeigniorageChanged(uint256 oldVal, uint256 newVal)
func (_Manager *ManagerFilterer) FilterSeigniorageChanged(opts *bind.FilterOpts) (*ManagerSeigniorageChangedIterator, error) {

	logs, sub, err := _Manager.contract.FilterLogs(opts, "SeigniorageChanged")
	if err != nil {
		return nil, err
	}
	return &ManagerSeigniorageChangedIterator{contract: _Manager.contract, event: "SeigniorageChanged", logs: logs, sub: sub}, nil
}

// WatchSeigniorageChanged is a free log subscription operation binding the contract event 0x739fc76c925698caa5b5b65517fbbf8148d051b676bfac3769c10dc9f146a751.
//
// Solidity: event SeigniorageChanged(uint256 oldVal, uint256 newVal)
func (_Manager *ManagerFilterer) WatchSeigniorageChanged(opts *bind.WatchOpts, sink chan<- *ManagerSeigniorageChanged) (event.Subscription, error) {

	logs, sub, err := _Manager.contract.WatchLogs(opts, "SeigniorageChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerSeigniorageChanged)
				if err := _Manager.contract.UnpackLog(event, "SeigniorageChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Manager contract.
type ManagerUnpausedIterator struct {
	Event *ManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerUnpaused represents a Unpaused event raised by the Manager contract.
type ManagerUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_Manager *ManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerUnpausedIterator{contract: _Manager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_Manager *ManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerUnpaused)
				if err := _Manager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerVaultChangedIterator is returned from FilterVaultChanged and is used to iterate over the raw logs and unpacked data for VaultChanged events raised by the Manager contract.
type ManagerVaultChangedIterator struct {
	Event *ManagerVaultChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerVaultChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerVaultChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerVaultChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerVaultChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerVaultChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerVaultChanged represents a VaultChanged event raised by the Manager contract.
type ManagerVaultChanged struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterVaultChanged is a free log retrieval operation binding the contract event 0xa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a7572.
//
// Solidity: event VaultChanged(address indexed account)
func (_Manager *ManagerFilterer) FilterVaultChanged(opts *bind.FilterOpts, account []common.Address) (*ManagerVaultChangedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "VaultChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return &ManagerVaultChangedIterator{contract: _Manager.contract, event: "VaultChanged", logs: logs, sub: sub}, nil
}

// WatchVaultChanged is a free log subscription operation binding the contract event 0xa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a7572.
//
// Solidity: event VaultChanged(address indexed account)
func (_Manager *ManagerFilterer) WatchVaultChanged(opts *bind.WatchOpts, sink chan<- *ManagerVaultChanged, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "VaultChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerVaultChanged)
				if err := _Manager.contract.UnpackLog(event, "VaultChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ManagerWhitelistedIterator is returned from FilterWhitelisted and is used to iterate over the raw logs and unpacked data for Whitelisted events raised by the Manager contract.
type ManagerWhitelistedIterator struct {
	Event *ManagerWhitelisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ManagerWhitelistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ManagerWhitelisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ManagerWhitelisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ManagerWhitelistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ManagerWhitelistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ManagerWhitelisted represents a Whitelisted event raised by the Manager contract.
type ManagerWhitelisted struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWhitelisted is a free log retrieval operation binding the contract event 0xaab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a54.
//
// Solidity: event Whitelisted(address indexed user)
func (_Manager *ManagerFilterer) FilterWhitelisted(opts *bind.FilterOpts, user []common.Address) (*ManagerWhitelistedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Manager.contract.FilterLogs(opts, "Whitelisted", userRule)
	if err != nil {
		return nil, err
	}
	return &ManagerWhitelistedIterator{contract: _Manager.contract, event: "Whitelisted", logs: logs, sub: sub}, nil
}

// WatchWhitelisted is a free log subscription operation binding the contract event 0xaab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a54.
//
// Solidity: event Whitelisted(address indexed user)
func (_Manager *ManagerFilterer) WatchWhitelisted(opts *bind.WatchOpts, sink chan<- *ManagerWhitelisted, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Manager.contract.WatchLogs(opts, "Whitelisted", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ManagerWhitelisted)
				if err := _Manager.contract.UnpackLog(event, "Whitelisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
