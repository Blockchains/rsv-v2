// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProposalABI is the input ABI used to generate the binding from.
const ProposalABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getQuantitiesIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accepted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQuantitiesOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rsvSupply\",\"type\":\"uint256\"},{\"name\":\"_vaultAddr\",\"type\":\"address\"},{\"name\":\"_prevBasket\",\"type\":\"address\"}],\"name\":\"prepare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantitiesOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantitiesIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_proposer\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_quantitiesIn\",\"type\":\"uint256[]\"},{\"name\":\"_quantitiesOut\",\"type\":\"uint256[]\"},{\"name\":\"_basket\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"quantitiesIn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"quantitiesOut\",\"type\":\"uint256[]\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// ProposalBin is the compiled bytecode used for deploying new contracts.
const ProposalBin = `60806040523480156200001157600080fd5b5060405162002e6138038062002e61833981018060405260c08110156200003757600080fd5b81516020830151604084018051929491938201926401000000008111156200005e57600080fd5b820160208101848111156200007257600080fd5b81518560208202830111640100000000821117156200009057600080fd5b50509291906020018051640100000000811115620000ad57600080fd5b82016020810184811115620000c157600080fd5b8151856020820283011164010000000082111715620000df57600080fd5b50509291906020018051640100000000811115620000fc57600080fd5b820160208101848111156200011057600080fd5b81518560208202830111640100000000821117156200012e57600080fd5b505060209182015190935091506000906200014d90620003af811b901c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081518351146200020857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f7175616e746974696573206d69736d6174636865640000000000000000000000604482015290519081900360640190fd5b6002869055600480546001600160a01b0319166001600160a01b03871617905583516200023d906005906020870190620003b4565b508251620002539060069060208601906200041e565b508151620002699060079060208501906200041e565b5080600860026101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b0316867ff53540d9e8bf8fe3396baa36e7fd34999c1a6b57bb70364c3d0c4dcbbe0baf5586868660405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156200030a578181015183820152602001620002f0565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156200034b57818101518382015260200162000331565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156200038c57818101518382015260200162000372565b50505050905001965050505050505060405180910390a3505050505050620004ae565b335b90565b8280548282559060005260206000209081019282156200040c579160200282015b828111156200040c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003d5565b506200041a9291506200046a565b5090565b8280548282559060005260206000209081019282156200045c579160200282015b828111156200045c5782518255916020019190600101906200043f565b506200041a92915062000491565b620003b191905b808211156200041a5780546001600160a01b031916815560010162000471565b620003b191905b808211156200041a576000815560010162000498565b6129a380620004be6000396000f3fe60806040523480156200001157600080fd5b5060043610620001905760003560e01c806383e166d911620000e1578063b2bdfa7b116200008d578063d498f3a0116200006f578063d498f3a01462000374578063e1af24681462000394578063edc832b314620003b45762000190565b8063b2bdfa7b1462000326578063cc8b96e514620003305762000190565b8063aa6ca80811620000c3578063aa6ca8081462000308578063aaf380f11462000312578063af640d0f146200031c5762000190565b806383e166d914620002f4578063a8e4fb9014620002fe5762000190565b80634f64b2be1162000141578063597e1fb51162000123578063597e1fb514620002c257806367fe5a0c14620002e057806379ba509714620002ea5762000190565b80634f64b2be146200026f578063522e117714620002b85762000190565b806316ada547116200017757806316ada547146200022957806319b05f49146200024557806343d726d614620002655762000190565b80630b6d7c8614620001955780631627540c14620001f1575b600080fd5b6200019f620003be565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620001dd578181015183820152602001620001c3565b505050509050019250505060405180910390f35b62000227600480360360208110156200020957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000419565b005b62000233620005ba565b60408051918252519081900360200190f35b62000227600480360360208110156200025d57600080fd5b5035620005c0565b6200022762000754565b6200028f600480360360208110156200028757600080fd5b5035620008e8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b620002276200091d565b620002cc62000bba565b604080519115158252519081900360200190f35b620002cc62000bc8565b6200022762000bd1565b6200019f62000ce3565b6200028f62000d3b565b6200019f62000d57565b6200028f62000dc7565b6200023362000de3565b6200028f62000de9565b62000227600480360360608110156200034857600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff6020820135811691604001351662000e05565b62000233600480360360208110156200038c57600080fd5b503562001a5f565b6200023360048036036020811015620003ac57600080fd5b503562001a7e565b6200028f62001a8c565b606060068054806020026020016040519081016040528092919081815260200182805480156200040e57602002820191906000526020600020905b815481526020019060010190808311620003f9575b505050505090505b90565b60005473ffffffffffffffffffffffffffffffffffffffff166200043c62001aae565b73ffffffffffffffffffffffffffffffffffffffff1614620004bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166200052d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620029316026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917fb59bab42c554cfd49f4f001c983b6ed93ede25748b10114b7d1cb1b3c97df7af91a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60035481565b60005473ffffffffffffffffffffffffffffffffffffffff16620005e362001aae565b73ffffffffffffffffffffffffffffffffffffffff16146200066657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60085460ff1615620006d957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f70726f706f73616c20616c726561647920616363657074656400000000000000604482015290519081900360640190fd5b6003819055600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560045460025460405173ffffffffffffffffffffffffffffffffffffffff909216917f488e676b8b729cd92586573f5b7b42787c118396c4a19f570e9c9e422e4dbf1890600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff166200077762001aae565b73ffffffffffffffffffffffffffffffffffffffff1614620007fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600854610100900460ff16156200087257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f70726f706f73616c20616c726561647920636c6f736564000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560045460025460405173ffffffffffffffffffffffffffffffffffffffff909216917f9f4919593d9037fda1c872a81da93898e49ce460fadf3cbf6e8ae5b64e80e3cc90600090a3565b60058181548110620008f657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff166200094062001aae565b73ffffffffffffffffffffffffffffffffffffffff1614620009c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60085462010000900473ffffffffffffffffffffffffffffffffffffffff16620009e957fe5b600854610100900460ff161562000a6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f70726f706f73616c20616c726561647920636c6f736564000000000000000000604482015290519081900360640190fd5b60085460ff1662000ad357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f70726f706f73616c206e6f742061636365707465640000000000000000000000604482015290519081900360640190fd5b600354421162000b4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7761697420746f20657865637574650000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560045460025460405173ffffffffffffffffffffffffffffffffffffffff909216917f867eabc55a8ac1bf0c7f26d0d4902538fd1165506b0fe99946359e9bd4d07fb690600090a3565b600854610100900460ff1681565b60085460ff1681565b62000bdb62001aae565b60015473ffffffffffffffffffffffffffffffffffffffff90811691161462000c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620029316026913960400191505060405180910390fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b606060078054806020026020016040519081016040528092919081815260200182805480156200040e5760200282019190600052602060002090815481526020019060010190808311620003f9575050505050905090565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b606060058054806020026020016040519081016040528092919081815260200182805480156200040e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000d92575050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1662000e2862001aae565b73ffffffffffffffffffffffffffffffffffffffff161462000eab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60085462010000900473ffffffffffffffffffffffffffffffffffffffff16620017ce5760608173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f1857600080fd5b505afa15801562000f2d573d6000803e3d6000fd5b505050506040513d602081101562000f4457600080fd5b505160408051828152602080840282010190915290801562000f70578160200160208202803883390190505b5090506000805b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fbe57600080fd5b505afa15801562000fd3573d6000803e3d6000fd5b505050506040513d602081101562000fea57600080fd5b50518110156200119a57600781815481106200100257fe5b9060005260206000200154600682815481106200101b57fe5b9060005260206000200154600583815481106200103457fe5b60009182526020918290200154604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152915191909216926370a082319260248082019391829003018186803b158015620010ae57600080fd5b505afa158015620010c3573d6000803e3d6000fd5b505050506040513d6020811015620010da57600080fd5b50510103915062001179866200116c8673ffffffffffffffffffffffffffffffffffffffff16639da0fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200113057600080fd5b505afa15801562001145573d6000803e3d6000fd5b505050506040513d60208110156200115c57600080fd5b5051859063ffffffff62001ab216565b9063ffffffff62001b3316565b8382815181106200118657fe5b602090810291909101015260010162000f77565b506005828473ffffffffffffffffffffffffffffffffffffffff16639da0fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e557600080fd5b505afa158015620011fa573d6000803e3d6000fd5b505050506040513d60208110156200121157600080fd5b5051604051620012219062001c32565b80806020018060200184815260200183810383528681815481526020019150805480156200128657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116200125a575b50508381038252855181528551602091820191808801910280838360005b83811015620012be578181015183820152602001620012a4565b5050505090500195505050505050604051809103906000f080158015620012e9573d6000803e3d6000fd5b50600860026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200137157600080fd5b505afa15801562001386573d6000803e3d6000fd5b505050506040513d60208110156200139d57600080fd5b5051600854604080517f949d225d00000000000000000000000000000000000000000000000000000000815290516201000090920473ffffffffffffffffffffffffffffffffffffffff169163949d225d91600480820192602092909190829003018186803b1580156200141057600080fd5b505afa15801562001425573d6000803e3d6000fd5b505050506040513d60208110156200143c57600080fd5b5051146200144657fe5b600854604080517f45b4567e0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff620100009093048316602482015290516060928616916345b4567e916044808301926000929190829003018186803b158015620014c857600080fd5b505afa158015620014dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200152557600080fd5b8101908080516401000000008111156200153e57600080fd5b820160208101848111156200155257600080fd5b81518560208202830111640100000000821117156200157057600080fd5b5050600854604080517f45b4567e000000000000000000000000000000000000000000000000000000008152600481018d905273ffffffffffffffffffffffffffffffffffffffff8b81166024830152915193975060609650620100009092041693506345b4567e9250604480820192600092909190829003018186803b158015620015fb57600080fd5b505afa15801562001610573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200165857600080fd5b8101908080516401000000008111156200167157600080fd5b820160208101848111156200168557600080fd5b8151856020820283011164010000000082111715620016a357600080fd5b50909450600093505050505b600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200171857600080fd5b505afa1580156200172d573d6000803e3d6000fd5b505050506040513d60208110156200174457600080fd5b5051811015620017c357600681815481106200175c57fe5b90600052602060002001548382815181106200177457fe5b6020026020010151146200178457fe5b600781815481106200179257fe5b9060005260206000200154828281518110620017aa57fe5b602002602001015114620017ba57fe5b600101620016af565b505050505062001a5a565b600854604080517f45b4567e000000000000000000000000000000000000000000000000000000008152600481018690526201000090920473ffffffffffffffffffffffffffffffffffffffff90811660248401529051908316916345b4567e916044808301926000929190829003018186803b1580156200184f57600080fd5b505afa15801562001864573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015620018ac57600080fd5b810190808051640100000000811115620018c557600080fd5b82016020810184811115620018d957600080fd5b8151856020820283011164010000000082111715620018f757600080fd5b50508051620019129450600693506020909101915062001c40565b50600854604080517f45b4567e0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff8481166024830152915162010000909304909116916345b4567e91604480820192600092909190829003018186803b1580156200199557600080fd5b505afa158015620019aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015620019f257600080fd5b81019080805164010000000081111562001a0b57600080fd5b8201602081018481111562001a1f57600080fd5b815185602082028301116401000000008211171562001a3d57600080fd5b5050805162001a589450600793506020909101915062001c40565b505b505050565b6007818154811062001a6d57fe5b600091825260209091200154905081565b6006818154811062001a6d57fe5b60085462010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3390565b60008262001ac35750600062001b2d565b8282028284828162001ad157fe5b041462001b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180620029576021913960400191505060405180910390fd5b90505b92915050565b600062001b2a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506000818362001c1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562001bdf57818101518382015260200162001bc5565b50505050905090810190601f16801562001c0d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858162001c2857fe5b0495945050505050565b610c838062001cae83390190565b82805482825590600052602060002090810192821562001c7e579160200282015b8281111562001c7e57825182559160200191906001019062001c61565b5062001c8c92915062001c90565b5090565b6200041691905b8082111562001c8c576000815560010162001c9756fe60806040523480156200001157600080fd5b5060405162000c8338038062000c83833981018060405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505092919060200180516401000000008111156200009f57600080fd5b82016020810184811115620000b357600080fd5b8151856020820283011164010000000082111715620000d157600080fd5b505060209091015181518551929450909250146200015057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c6964206261736b6574000000000000000000000000000000000000604482015290519081900360640190fd5b6000835111620001c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6261736b657420746f6f20736d616c6c00000000000000000000000000000000604482015290519081900360640190fd5b6103e8835111156200023457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6261736b657420746f6f20626967000000000000000000000000000000000000604482015290519081900360640190fd5b8251620002499060019060208601906200026c565b5081516200025f906002906020850190620002d6565b5060005550620003699050565b828054828255906000526020600020908101928215620002c4579160200282015b82811115620002c457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200028d565b50620002d292915062000322565b5090565b82805482825590600052602060002090810192821562000314579160200282015b8281111562000314578251825591602001919060010190620002f7565b50620002d29291506200034c565b6200034991905b80821115620002d25780546001600160a01b031916815560010162000329565b90565b6200034991905b80821115620002d2576000815560010162000353565b61090a80620003796000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063949d225d1161005b578063949d225d146101be5780639da0fd1c146101c6578063aa6ca808146101ce578063b6839baf146101d657610088565b806314e9fb011461008d57806345b4567e146100bc5780634f64b2be14610145578063868bc83d1461018b575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101f3565b60408051918252519081900360200190f35b6100f5600480360360408110156100d257600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610211565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610131578181015183820152602001610119565b505050509050019250505060405180910390f35b6101626004803603602081101561015b57600080fd5b5035610539565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100aa600480360360208110156101a157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661056d565b6100aa61057f565b6100aa610585565b6100f561058b565b6100f5600480360360208110156101ec57600080fd5b50356105fa565b6002818154811061020057fe5b600091825260209091200154905081565b606080600354604051908082528060200260200182016040528015610240578160200160208202803883390190505b50905060005b6003548110156104ca57600460006001838154811061026157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548473ffffffffffffffffffffffffffffffffffffffff1663868bc83d600184815481106102f057fe5b600091825260209182902001546040805163ffffffff851660e01b815273ffffffffffffffffffffffffffffffffffffffff90921660048301525160248083019392829003018186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d602081101561037057600080fd5b505111156104c2576104a9600460006001848154811061038c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548573ffffffffffffffffffffffffffffffffffffffff1663868bc83d6001858154811061041b57fe5b600091825260209182902001546040805163ffffffff851660e01b815273ffffffffffffffffffffffffffffffffffffffff90921660048301525160248083019392829003018186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d602081101561049b57600080fd5b50519063ffffffff61068f16565b8282815181106104b557fe5b6020026020010181815250505b600101610246565b5060005b60035481101561052f576105106000546105048484815181106104ed57fe5b6020026020010151886106d890919063ffffffff16565b9063ffffffff61074b16565b82828151811061051c57fe5b60209081029190910101526001016104ce565b5090505b92915050565b6001818154811061054657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60046020526000908152604090205481565b60035481565b60005481565b606060018054806020026020016040519081016040528092919081815260200182805480156105f057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105c5575b5050505050905090565b606080600354604051908082528060200260200182016040528015610629578160200160208202803883390190505b50905060005b600354811015610688576106696000546105046002848154811061064f57fe5b9060005260206000200154876106d890919063ffffffff16565b82828151811061067557fe5b602090810291909101015260010161062f565b5092915050565b60006106d183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061078d565b9392505050565b6000826106e757506000610533565b828202828482816106f457fe5b04146106d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806108be6021913960400191505060405180910390fd5b60006106d183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061083e565b60008184841115610836576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107fb5781810151838201526020016107e3565b50505050905090810190601f1680156108285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836108a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156107fb5781810151838201526020016107e3565b5060008385816108b357fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058201e5e31c6d769eb32e3a62da63aa438ca035a93b215f1cd717d914e1b5af0973e00294f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058200ce003febd20959ca0c15f435994347f600677148f50e5ec6f0063625fccb0110029`

// DeployProposal deploys a new Ethereum contract, binding an instance of Proposal to it.
func DeployProposal(auth *bind.TransactOpts, backend bind.ContractBackend, _id *big.Int, _proposer common.Address, _tokens []common.Address, _quantitiesIn []*big.Int, _quantitiesOut []*big.Int, _basket common.Address) (common.Address, *types.Transaction, *Proposal, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProposalBin), backend, _id, _proposer, _tokens, _quantitiesIn, _quantitiesOut, _basket)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// Proposal is an auto generated Go binding around an Ethereum contract.
type Proposal struct {
	ProposalCaller     // Read-only binding to the contract
	ProposalTransactor // Write-only binding to the contract
	ProposalFilterer   // Log filterer for contract events
}

// ProposalCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProposalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProposalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProposalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProposalSession struct {
	Contract     *Proposal         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProposalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProposalCallerSession struct {
	Contract *ProposalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProposalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProposalTransactorSession struct {
	Contract     *ProposalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProposalRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProposalRaw struct {
	Contract *Proposal // Generic contract binding to access the raw methods on
}

// ProposalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProposalCallerRaw struct {
	Contract *ProposalCaller // Generic read-only contract binding to access the raw methods on
}

// ProposalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProposalTransactorRaw struct {
	Contract *ProposalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProposal creates a new instance of Proposal, bound to a specific deployed contract.
func NewProposal(address common.Address, backend bind.ContractBackend) (*Proposal, error) {
	contract, err := bindProposal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// NewProposalCaller creates a new read-only instance of Proposal, bound to a specific deployed contract.
func NewProposalCaller(address common.Address, caller bind.ContractCaller) (*ProposalCaller, error) {
	contract, err := bindProposal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalCaller{contract: contract}, nil
}

// NewProposalTransactor creates a new write-only instance of Proposal, bound to a specific deployed contract.
func NewProposalTransactor(address common.Address, transactor bind.ContractTransactor) (*ProposalTransactor, error) {
	contract, err := bindProposal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalTransactor{contract: contract}, nil
}

// NewProposalFilterer creates a new log filterer instance of Proposal, bound to a specific deployed contract.
func NewProposalFilterer(address common.Address, filterer bind.ContractFilterer) (*ProposalFilterer, error) {
	contract, err := bindProposal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProposalFilterer{contract: contract}, nil
}

// bindProposal binds a generic wrapper to an already deployed contract.
func bindProposal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.ProposalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transact(opts, method, params...)
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Proposal *ProposalCaller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "_nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Proposal *ProposalSession) NominatedOwner() (common.Address, error) {
	return _Proposal.Contract.NominatedOwner(&_Proposal.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0xaaf380f1.
//
// Solidity: function _nominatedOwner() constant returns(address)
func (_Proposal *ProposalCallerSession) NominatedOwner() (common.Address, error) {
	return _Proposal.Contract.NominatedOwner(&_Proposal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Proposal *ProposalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "_owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Proposal *ProposalSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb2bdfa7b.
//
// Solidity: function _owner() constant returns(address)
func (_Proposal *ProposalCallerSession) Owner() (common.Address, error) {
	return _Proposal.Contract.Owner(&_Proposal.CallOpts)
}

// Accepted is a free data retrieval call binding the contract method 0x67fe5a0c.
//
// Solidity: function accepted() constant returns(bool)
func (_Proposal *ProposalCaller) Accepted(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "accepted")
	return *ret0, err
}

// Accepted is a free data retrieval call binding the contract method 0x67fe5a0c.
//
// Solidity: function accepted() constant returns(bool)
func (_Proposal *ProposalSession) Accepted() (bool, error) {
	return _Proposal.Contract.Accepted(&_Proposal.CallOpts)
}

// Accepted is a free data retrieval call binding the contract method 0x67fe5a0c.
//
// Solidity: function accepted() constant returns(bool)
func (_Proposal *ProposalCallerSession) Accepted() (bool, error) {
	return _Proposal.Contract.Accepted(&_Proposal.CallOpts)
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Proposal *ProposalCaller) Basket(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "basket")
	return *ret0, err
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Proposal *ProposalSession) Basket() (common.Address, error) {
	return _Proposal.Contract.Basket(&_Proposal.CallOpts)
}

// Basket is a free data retrieval call binding the contract method 0xedc832b3.
//
// Solidity: function basket() constant returns(address)
func (_Proposal *ProposalCallerSession) Basket() (common.Address, error) {
	return _Proposal.Contract.Basket(&_Proposal.CallOpts)
}

// Closed is a free data retrieval call binding the contract method 0x597e1fb5.
//
// Solidity: function closed() constant returns(bool)
func (_Proposal *ProposalCaller) Closed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "closed")
	return *ret0, err
}

// Closed is a free data retrieval call binding the contract method 0x597e1fb5.
//
// Solidity: function closed() constant returns(bool)
func (_Proposal *ProposalSession) Closed() (bool, error) {
	return _Proposal.Contract.Closed(&_Proposal.CallOpts)
}

// Closed is a free data retrieval call binding the contract method 0x597e1fb5.
//
// Solidity: function closed() constant returns(bool)
func (_Proposal *ProposalCallerSession) Closed() (bool, error) {
	return _Proposal.Contract.Closed(&_Proposal.CallOpts)
}

// GetQuantitiesIn is a free data retrieval call binding the contract method 0x0b6d7c86.
//
// Solidity: function getQuantitiesIn() constant returns(uint256[])
func (_Proposal *ProposalCaller) GetQuantitiesIn(opts *bind.CallOpts) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getQuantitiesIn")
	return *ret0, err
}

// GetQuantitiesIn is a free data retrieval call binding the contract method 0x0b6d7c86.
//
// Solidity: function getQuantitiesIn() constant returns(uint256[])
func (_Proposal *ProposalSession) GetQuantitiesIn() ([]*big.Int, error) {
	return _Proposal.Contract.GetQuantitiesIn(&_Proposal.CallOpts)
}

// GetQuantitiesIn is a free data retrieval call binding the contract method 0x0b6d7c86.
//
// Solidity: function getQuantitiesIn() constant returns(uint256[])
func (_Proposal *ProposalCallerSession) GetQuantitiesIn() ([]*big.Int, error) {
	return _Proposal.Contract.GetQuantitiesIn(&_Proposal.CallOpts)
}

// GetQuantitiesOut is a free data retrieval call binding the contract method 0x83e166d9.
//
// Solidity: function getQuantitiesOut() constant returns(uint256[])
func (_Proposal *ProposalCaller) GetQuantitiesOut(opts *bind.CallOpts) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getQuantitiesOut")
	return *ret0, err
}

// GetQuantitiesOut is a free data retrieval call binding the contract method 0x83e166d9.
//
// Solidity: function getQuantitiesOut() constant returns(uint256[])
func (_Proposal *ProposalSession) GetQuantitiesOut() ([]*big.Int, error) {
	return _Proposal.Contract.GetQuantitiesOut(&_Proposal.CallOpts)
}

// GetQuantitiesOut is a free data retrieval call binding the contract method 0x83e166d9.
//
// Solidity: function getQuantitiesOut() constant returns(uint256[])
func (_Proposal *ProposalCallerSession) GetQuantitiesOut() ([]*big.Int, error) {
	return _Proposal.Contract.GetQuantitiesOut(&_Proposal.CallOpts)
}

// GetTokens is a free data retrieval call binding the contract method 0xaa6ca808.
//
// Solidity: function getTokens() constant returns(address[])
func (_Proposal *ProposalCaller) GetTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getTokens")
	return *ret0, err
}

// GetTokens is a free data retrieval call binding the contract method 0xaa6ca808.
//
// Solidity: function getTokens() constant returns(address[])
func (_Proposal *ProposalSession) GetTokens() ([]common.Address, error) {
	return _Proposal.Contract.GetTokens(&_Proposal.CallOpts)
}

// GetTokens is a free data retrieval call binding the contract method 0xaa6ca808.
//
// Solidity: function getTokens() constant returns(address[])
func (_Proposal *ProposalCallerSession) GetTokens() ([]common.Address, error) {
	return _Proposal.Contract.GetTokens(&_Proposal.CallOpts)
}

// Id is a free data retrieval call binding the contract method 0xaf640d0f.
//
// Solidity: function id() constant returns(uint256)
func (_Proposal *ProposalCaller) Id(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "id")
	return *ret0, err
}

// Id is a free data retrieval call binding the contract method 0xaf640d0f.
//
// Solidity: function id() constant returns(uint256)
func (_Proposal *ProposalSession) Id() (*big.Int, error) {
	return _Proposal.Contract.Id(&_Proposal.CallOpts)
}

// Id is a free data retrieval call binding the contract method 0xaf640d0f.
//
// Solidity: function id() constant returns(uint256)
func (_Proposal *ProposalCallerSession) Id() (*big.Int, error) {
	return _Proposal.Contract.Id(&_Proposal.CallOpts)
}

// Proposer is a free data retrieval call binding the contract method 0xa8e4fb90.
//
// Solidity: function proposer() constant returns(address)
func (_Proposal *ProposalCaller) Proposer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "proposer")
	return *ret0, err
}

// Proposer is a free data retrieval call binding the contract method 0xa8e4fb90.
//
// Solidity: function proposer() constant returns(address)
func (_Proposal *ProposalSession) Proposer() (common.Address, error) {
	return _Proposal.Contract.Proposer(&_Proposal.CallOpts)
}

// Proposer is a free data retrieval call binding the contract method 0xa8e4fb90.
//
// Solidity: function proposer() constant returns(address)
func (_Proposal *ProposalCallerSession) Proposer() (common.Address, error) {
	return _Proposal.Contract.Proposer(&_Proposal.CallOpts)
}

// QuantitiesIn is a free data retrieval call binding the contract method 0xe1af2468.
//
// Solidity: function quantitiesIn(uint256 ) constant returns(uint256)
func (_Proposal *ProposalCaller) QuantitiesIn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "quantitiesIn", arg0)
	return *ret0, err
}

// QuantitiesIn is a free data retrieval call binding the contract method 0xe1af2468.
//
// Solidity: function quantitiesIn(uint256 ) constant returns(uint256)
func (_Proposal *ProposalSession) QuantitiesIn(arg0 *big.Int) (*big.Int, error) {
	return _Proposal.Contract.QuantitiesIn(&_Proposal.CallOpts, arg0)
}

// QuantitiesIn is a free data retrieval call binding the contract method 0xe1af2468.
//
// Solidity: function quantitiesIn(uint256 ) constant returns(uint256)
func (_Proposal *ProposalCallerSession) QuantitiesIn(arg0 *big.Int) (*big.Int, error) {
	return _Proposal.Contract.QuantitiesIn(&_Proposal.CallOpts, arg0)
}

// QuantitiesOut is a free data retrieval call binding the contract method 0xd498f3a0.
//
// Solidity: function quantitiesOut(uint256 ) constant returns(uint256)
func (_Proposal *ProposalCaller) QuantitiesOut(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "quantitiesOut", arg0)
	return *ret0, err
}

// QuantitiesOut is a free data retrieval call binding the contract method 0xd498f3a0.
//
// Solidity: function quantitiesOut(uint256 ) constant returns(uint256)
func (_Proposal *ProposalSession) QuantitiesOut(arg0 *big.Int) (*big.Int, error) {
	return _Proposal.Contract.QuantitiesOut(&_Proposal.CallOpts, arg0)
}

// QuantitiesOut is a free data retrieval call binding the contract method 0xd498f3a0.
//
// Solidity: function quantitiesOut(uint256 ) constant returns(uint256)
func (_Proposal *ProposalCallerSession) QuantitiesOut(arg0 *big.Int) (*big.Int, error) {
	return _Proposal.Contract.QuantitiesOut(&_Proposal.CallOpts, arg0)
}

// Time is a free data retrieval call binding the contract method 0x16ada547.
//
// Solidity: function time() constant returns(uint256)
func (_Proposal *ProposalCaller) Time(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "time")
	return *ret0, err
}

// Time is a free data retrieval call binding the contract method 0x16ada547.
//
// Solidity: function time() constant returns(uint256)
func (_Proposal *ProposalSession) Time() (*big.Int, error) {
	return _Proposal.Contract.Time(&_Proposal.CallOpts)
}

// Time is a free data retrieval call binding the contract method 0x16ada547.
//
// Solidity: function time() constant returns(uint256)
func (_Proposal *ProposalCallerSession) Time() (*big.Int, error) {
	return _Proposal.Contract.Time(&_Proposal.CallOpts)
}

// Tokens is a free data retrieval call binding the contract method 0x4f64b2be.
//
// Solidity: function tokens(uint256 ) constant returns(address)
func (_Proposal *ProposalCaller) Tokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "tokens", arg0)
	return *ret0, err
}

// Tokens is a free data retrieval call binding the contract method 0x4f64b2be.
//
// Solidity: function tokens(uint256 ) constant returns(address)
func (_Proposal *ProposalSession) Tokens(arg0 *big.Int) (common.Address, error) {
	return _Proposal.Contract.Tokens(&_Proposal.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0x4f64b2be.
//
// Solidity: function tokens(uint256 ) constant returns(address)
func (_Proposal *ProposalCallerSession) Tokens(arg0 *big.Int) (common.Address, error) {
	return _Proposal.Contract.Tokens(&_Proposal.CallOpts, arg0)
}

// Accept is a paid mutator transaction binding the contract method 0x19b05f49.
//
// Solidity: function accept(uint256 _time) returns()
func (_Proposal *ProposalTransactor) Accept(opts *bind.TransactOpts, _time *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "accept", _time)
}

// Accept is a paid mutator transaction binding the contract method 0x19b05f49.
//
// Solidity: function accept(uint256 _time) returns()
func (_Proposal *ProposalSession) Accept(_time *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.Accept(&_Proposal.TransactOpts, _time)
}

// Accept is a paid mutator transaction binding the contract method 0x19b05f49.
//
// Solidity: function accept(uint256 _time) returns()
func (_Proposal *ProposalTransactorSession) Accept(_time *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.Accept(&_Proposal.TransactOpts, _time)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Proposal *ProposalTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Proposal *ProposalSession) AcceptOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.AcceptOwnership(&_Proposal.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Proposal *ProposalTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Proposal.Contract.AcceptOwnership(&_Proposal.TransactOpts)
}

// Close is a paid mutator transaction binding the contract method 0x43d726d6.
//
// Solidity: function close() returns()
func (_Proposal *ProposalTransactor) Close(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "close")
}

// Close is a paid mutator transaction binding the contract method 0x43d726d6.
//
// Solidity: function close() returns()
func (_Proposal *ProposalSession) Close() (*types.Transaction, error) {
	return _Proposal.Contract.Close(&_Proposal.TransactOpts)
}

// Close is a paid mutator transaction binding the contract method 0x43d726d6.
//
// Solidity: function close() returns()
func (_Proposal *ProposalTransactorSession) Close() (*types.Transaction, error) {
	return _Proposal.Contract.Close(&_Proposal.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_Proposal *ProposalTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_Proposal *ProposalSession) Complete() (*types.Transaction, error) {
	return _Proposal.Contract.Complete(&_Proposal.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_Proposal *ProposalTransactorSession) Complete() (*types.Transaction, error) {
	return _Proposal.Contract.Complete(&_Proposal.TransactOpts)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Proposal *ProposalTransactor) NominateNewOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "nominateNewOwner", newOwner)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Proposal *ProposalSession) NominateNewOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.NominateNewOwner(&_Proposal.TransactOpts, newOwner)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address newOwner) returns()
func (_Proposal *ProposalTransactorSession) NominateNewOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.NominateNewOwner(&_Proposal.TransactOpts, newOwner)
}

// Prepare is a paid mutator transaction binding the contract method 0xcc8b96e5.
//
// Solidity: function prepare(uint256 _rsvSupply, address _vaultAddr, address _prevBasket) returns()
func (_Proposal *ProposalTransactor) Prepare(opts *bind.TransactOpts, _rsvSupply *big.Int, _vaultAddr common.Address, _prevBasket common.Address) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "prepare", _rsvSupply, _vaultAddr, _prevBasket)
}

// Prepare is a paid mutator transaction binding the contract method 0xcc8b96e5.
//
// Solidity: function prepare(uint256 _rsvSupply, address _vaultAddr, address _prevBasket) returns()
func (_Proposal *ProposalSession) Prepare(_rsvSupply *big.Int, _vaultAddr common.Address, _prevBasket common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.Prepare(&_Proposal.TransactOpts, _rsvSupply, _vaultAddr, _prevBasket)
}

// Prepare is a paid mutator transaction binding the contract method 0xcc8b96e5.
//
// Solidity: function prepare(uint256 _rsvSupply, address _vaultAddr, address _prevBasket) returns()
func (_Proposal *ProposalTransactorSession) Prepare(_rsvSupply *big.Int, _vaultAddr common.Address, _prevBasket common.Address) (*types.Transaction, error) {
	return _Proposal.Contract.Prepare(&_Proposal.TransactOpts, _rsvSupply, _vaultAddr, _prevBasket)
}

// ProposalNewOwnerNominatedIterator is returned from FilterNewOwnerNominated and is used to iterate over the raw logs and unpacked data for NewOwnerNominated events raised by the Proposal contract.
type ProposalNewOwnerNominatedIterator struct {
	Event *ProposalNewOwnerNominated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalNewOwnerNominatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalNewOwnerNominated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalNewOwnerNominated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalNewOwnerNominatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalNewOwnerNominatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalNewOwnerNominated represents a NewOwnerNominated event raised by the Proposal contract.
type ProposalNewOwnerNominated struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewOwnerNominated is a free log retrieval operation binding the contract event 0xb59bab42c554cfd49f4f001c983b6ed93ede25748b10114b7d1cb1b3c97df7af.
//
// Solidity: event NewOwnerNominated(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) FilterNewOwnerNominated(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProposalNewOwnerNominatedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "NewOwnerNominated", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalNewOwnerNominatedIterator{contract: _Proposal.contract, event: "NewOwnerNominated", logs: logs, sub: sub}, nil
}

// WatchNewOwnerNominated is a free log subscription operation binding the contract event 0xb59bab42c554cfd49f4f001c983b6ed93ede25748b10114b7d1cb1b3c97df7af.
//
// Solidity: event NewOwnerNominated(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) WatchNewOwnerNominated(opts *bind.WatchOpts, sink chan<- *ProposalNewOwnerNominated, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "NewOwnerNominated", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalNewOwnerNominated)
				if err := _Proposal.contract.UnpackLog(event, "NewOwnerNominated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Proposal contract.
type ProposalOwnershipTransferredIterator struct {
	Event *ProposalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalOwnershipTransferred represents a OwnershipTransferred event raised by the Proposal contract.
type ProposalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProposalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalOwnershipTransferredIterator{contract: _Proposal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proposal *ProposalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProposalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalOwnershipTransferred)
				if err := _Proposal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalProposalAcceptedIterator is returned from FilterProposalAccepted and is used to iterate over the raw logs and unpacked data for ProposalAccepted events raised by the Proposal contract.
type ProposalProposalAcceptedIterator struct {
	Event *ProposalProposalAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalAccepted represents a ProposalAccepted event raised by the Proposal contract.
type ProposalProposalAccepted struct {
	Id       *big.Int
	Proposer common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProposalAccepted is a free log retrieval operation binding the contract event 0x488e676b8b729cd92586573f5b7b42787c118396c4a19f570e9c9e422e4dbf18.
//
// Solidity: event ProposalAccepted(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) FilterProposalAccepted(opts *bind.FilterOpts, id []*big.Int, proposer []common.Address) (*ProposalProposalAcceptedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalAccepted", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalAcceptedIterator{contract: _Proposal.contract, event: "ProposalAccepted", logs: logs, sub: sub}, nil
}

// WatchProposalAccepted is a free log subscription operation binding the contract event 0x488e676b8b729cd92586573f5b7b42787c118396c4a19f570e9c9e422e4dbf18.
//
// Solidity: event ProposalAccepted(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) WatchProposalAccepted(opts *bind.WatchOpts, sink chan<- *ProposalProposalAccepted, id []*big.Int, proposer []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalAccepted", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalAccepted)
				if err := _Proposal.contract.UnpackLog(event, "ProposalAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalProposalClosedIterator is returned from FilterProposalClosed and is used to iterate over the raw logs and unpacked data for ProposalClosed events raised by the Proposal contract.
type ProposalProposalClosedIterator struct {
	Event *ProposalProposalClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalClosed represents a ProposalClosed event raised by the Proposal contract.
type ProposalProposalClosed struct {
	Id       *big.Int
	Proposer common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProposalClosed is a free log retrieval operation binding the contract event 0x9f4919593d9037fda1c872a81da93898e49ce460fadf3cbf6e8ae5b64e80e3cc.
//
// Solidity: event ProposalClosed(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) FilterProposalClosed(opts *bind.FilterOpts, id []*big.Int, proposer []common.Address) (*ProposalProposalClosedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalClosed", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalClosedIterator{contract: _Proposal.contract, event: "ProposalClosed", logs: logs, sub: sub}, nil
}

// WatchProposalClosed is a free log subscription operation binding the contract event 0x9f4919593d9037fda1c872a81da93898e49ce460fadf3cbf6e8ae5b64e80e3cc.
//
// Solidity: event ProposalClosed(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) WatchProposalClosed(opts *bind.WatchOpts, sink chan<- *ProposalProposalClosed, id []*big.Int, proposer []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalClosed", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalClosed)
				if err := _Proposal.contract.UnpackLog(event, "ProposalClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalProposalCreatedIterator is returned from FilterProposalCreated and is used to iterate over the raw logs and unpacked data for ProposalCreated events raised by the Proposal contract.
type ProposalProposalCreatedIterator struct {
	Event *ProposalProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalCreated represents a ProposalCreated event raised by the Proposal contract.
type ProposalProposalCreated struct {
	Id            *big.Int
	Proposer      common.Address
	Tokens        []common.Address
	QuantitiesIn  []*big.Int
	QuantitiesOut []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProposalCreated is a free log retrieval operation binding the contract event 0xf53540d9e8bf8fe3396baa36e7fd34999c1a6b57bb70364c3d0c4dcbbe0baf55.
//
// Solidity: event ProposalCreated(uint256 indexed id, address indexed proposer, address[] tokens, uint256[] quantitiesIn, uint256[] quantitiesOut)
func (_Proposal *ProposalFilterer) FilterProposalCreated(opts *bind.FilterOpts, id []*big.Int, proposer []common.Address) (*ProposalProposalCreatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalCreated", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalCreatedIterator{contract: _Proposal.contract, event: "ProposalCreated", logs: logs, sub: sub}, nil
}

// WatchProposalCreated is a free log subscription operation binding the contract event 0xf53540d9e8bf8fe3396baa36e7fd34999c1a6b57bb70364c3d0c4dcbbe0baf55.
//
// Solidity: event ProposalCreated(uint256 indexed id, address indexed proposer, address[] tokens, uint256[] quantitiesIn, uint256[] quantitiesOut)
func (_Proposal *ProposalFilterer) WatchProposalCreated(opts *bind.WatchOpts, sink chan<- *ProposalProposalCreated, id []*big.Int, proposer []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalCreated", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalCreated)
				if err := _Proposal.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalProposalFinishedIterator is returned from FilterProposalFinished and is used to iterate over the raw logs and unpacked data for ProposalFinished events raised by the Proposal contract.
type ProposalProposalFinishedIterator struct {
	Event *ProposalProposalFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalFinished represents a ProposalFinished event raised by the Proposal contract.
type ProposalProposalFinished struct {
	Id       *big.Int
	Proposer common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProposalFinished is a free log retrieval operation binding the contract event 0x867eabc55a8ac1bf0c7f26d0d4902538fd1165506b0fe99946359e9bd4d07fb6.
//
// Solidity: event ProposalFinished(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) FilterProposalFinished(opts *bind.FilterOpts, id []*big.Int, proposer []common.Address) (*ProposalProposalFinishedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ProposalFinished", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return &ProposalProposalFinishedIterator{contract: _Proposal.contract, event: "ProposalFinished", logs: logs, sub: sub}, nil
}

// WatchProposalFinished is a free log subscription operation binding the contract event 0x867eabc55a8ac1bf0c7f26d0d4902538fd1165506b0fe99946359e9bd4d07fb6.
//
// Solidity: event ProposalFinished(uint256 indexed id, address indexed proposer)
func (_Proposal *ProposalFilterer) WatchProposalFinished(opts *bind.WatchOpts, sink chan<- *ProposalProposalFinished, id []*big.Int, proposer []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ProposalFinished", idRule, proposerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalFinished)
				if err := _Proposal.contract.UnpackLog(event, "ProposalFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
